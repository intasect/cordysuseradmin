/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;
import java.util.HashSet;

import com.cordys.coe.tools.useradmin.cordys.CordysUser;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;


/**
 * UI class to support role based user assignments.
 * 
 * @author kekema
 *
 */
public class UIRoleUsers extends UIRoleUsersBase
{
    public UIRoleUsers()
    {
        this((BusObjectConfig)null);
    }

    public UIRoleUsers(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Get all org users plus indicator whether the given role is assigned.
     * 
     * @param roleDN
     * @return
     */
    public static UIRoleUsers getUIRoleUsers(String roleDN)
    {
    	UIRoleUsers uiRoleUsers = new UIRoleUsers();
    	uiRoleUsers.makeTransient();
    	uiRoleUsers.setRoleDN(roleDN);
    	UIRoleUsers.Users roleUsers = new UIRoleUsers.Users();
    	uiRoleUsers.setUsersObject(roleUsers);
    	
    	int seqNo = 0;
    	
    	ArrayList<CordysUser> cordysUsers = CordysUser.getOrgUsersList(null, true, true);
    	for (CordysUser cordysUser : cordysUsers)
    	{
    		seqNo++;
    		UIRoleUsers.Users.User roleUser = new UIRoleUsers.Users.User();
    		roleUser.makeTransient();
    		roleUser.setSeqNo(seqNo);
    		roleUser.setOrgUserDN(cordysUser.getOrgUserDN());
    		// compose description from full user name + osidentity for non-anonymous users
    		if ("anonymous".equals(cordysUser.getDescription()))
    		{
    			roleUser.setDescription(cordysUser.getDescription());
    		}
    		else
    		{
    			roleUser.setDescription(cordysUser.getDescription() + " (" + cordysUser.getOSIdentity() + ")");
    		}
    		roleUser.setAssigned(false);
    		ArrayList<String> userRoles = cordysUser.getRoleDNs();
    		if (userRoles != null)
    		{
    			roleUser.setAssigned(userRoles.contains(roleDN));		
    		}
    		roleUsers.addUserObject(roleUser);
    	}
    	
        return uiRoleUsers;
    }

    public void onInsert()
    {
    	// N.A.
    }

    /**
     * Process any assigned/unassigned user wrt the role
     */
    public void onUpdate()
    {
    	String roleDN = this.getRoleDN();
    	// compose hashset of users who currently do have the role assigned
    	HashSet<String> currentAssignedUsers = new HashSet<String>();
    	UIRoleUsers origUIRoleUsers = (UIRoleUsers)this.getOriginalObject();
    	UIRoleUsers.Users origUsers = origUIRoleUsers.getUsersObject();
   		BusObjectIterator<UIRoleUsers.Users.User> origUserObjects = origUsers.getUserObjects();
   		while (origUserObjects.hasMoreElements())
   		{
   			UIRoleUsers.Users.User origUser = (UIRoleUsers.Users.User)origUserObjects.nextElement();
   			if (origUser.getAssigned())
   			{
   				currentAssignedUsers.add(origUser.getOrgUserDN());
   			}
   		}
   		// find out any required updates from the tuple/new
    	UIRoleUsers.Users users = this.getUsersObject();
   		BusObjectIterator<UIRoleUsers.Users.User> userObjects = users.getUserObjects();
   		while (userObjects.hasMoreElements())
   		{
   			UIRoleUsers.Users.User user = (UIRoleUsers.Users.User)userObjects.nextElement();
   			boolean currentlyAssigned = (currentAssignedUsers.contains(user.getOrgUserDN()));
   			if (user.getAssigned() && (!currentlyAssigned))
   			{
   				CordysUser.addRole(user.getOrgUserDN(), roleDN);
   			}
   			else if (!user.getAssigned() && (currentlyAssigned))
   			{
   				CordysUser.removeRole(user.getOrgUserDN(), roleDN);
   			}
   		}
        // read back the actual list
        UIRoleUsers actualRoleUsers = UIRoleUsers.getUIRoleUsers(roleDN);
        if (actualRoleUsers != null)
        {
        	UIRoleUsers.Users actualUsers = actualRoleUsers.getUsersObject();
        	UIRoleUsers.Users uiUsers = new UIRoleUsers.Users(new BusObjectConfig(actualUsers, BusObjectConfig.TRANSIENT_OBJECT));
        	this.setUsersObject(uiUsers);
        }   		
    }

    public void onDelete()
    {
    	// N.A.
    }

    public static class Users extends UIRoleUsers.UsersBase
    {
        public Users()
        {
            this((BusObjectConfig)null);
        }

        public Users(BusObjectConfig config)
        {
            super(config);
        }

        public void onInsert()
        {
        }

        public void onUpdate()
        {
        }

        public void onDelete()
        {
        }

        public static class User extends UIRoleUsers.Users.UserBase
        {
            public User()
            {
                this((BusObjectConfig)null);
            }

            public User(BusObjectConfig config)
            {
                super(config);
            }

            public void onInsert()
            {
            }

            public void onUpdate()
            {
            }

            public void onDelete()
            {
            }

        }
    }
}
