/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;
import java.util.HashMap;

import com.cordys.coe.tools.useradmin.Role;
import com.cordys.coe.tools.useradmin.Team;
import com.cordys.coe.tools.useradmin.Teams;
import com.cordys.coe.tools.useradmin.cordys.CordysObject;
import com.cordys.coe.tools.useradmin.cordys.CordysObjectList;
import com.cordys.coe.tools.useradmin.cordys.CordysUser;
import com.cordys.coe.tools.useradmin.cordys.TeamAssignment;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;


/**
 * Class to support UI on assigning users to a team (via roles).
 * 
 * @author kekema
 *
 */
public class UITeamUsers extends UITeamUsersBase
{
    public UITeamUsers()
    {
        this((BusObjectConfig)null);
    }

    public UITeamUsers(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Get current assigned users to a team
     * 
     * @param unitID
     * @return
     */
    public static UITeamUsers getUITeamUsers(String unitID)
    {
        UITeamUsers uiTeamUsers = new UITeamUsers();
        uiTeamUsers.makeTransient();
        uiTeamUsers.setUnitID(unitID);
        UITeamUsers.Assignments assignments = new UITeamUsers.Assignments();
        uiTeamUsers.setAssignmentsObject(assignments);
        
        // get user names by DN
        HashMap<String, String> userNamesByDN = CordysUser.getOrgUserNamesByDN(false);
        
    	// get team assignments
    	CordysObjectList teamAssignments = null;
    	int seqNo = 0;
    	try
    	{
	    	teamAssignments = TeamAssignment.getAssignments("", unitID, true);
	    	for (CordysObject cordysObject : teamAssignments.getList())
	    	{
	    		TeamAssignment teamAssignment = (TeamAssignment)cordysObject;
	    		// the seqNo sequence number can be used client side as an index to the team/role
	    		seqNo++;
	    		UITeamUsers.Assignments.Assignment uiAssignment = new UITeamUsers.Assignments.Assignment();
	    		uiAssignment.makeTransient();
	    		uiAssignment.setSeqNo(seqNo);
	    		String orgUserDN = teamAssignment.getUserDN();
	    		uiAssignment.setOrgUserDN(orgUserDN);
	    		String roleDN = teamAssignment.getRoleDN();
	    		uiAssignment.setRoleDN(roleDN);
	    		uiAssignment.setAssigned(true);
	    		uiAssignment.setAssignmentID(teamAssignment.getID());
	    		String roleName = Util.getNameFromDN(roleDN);
	    		uiAssignment.setDescription(userNamesByDN.get(orgUserDN) + "/" + roleName);
	    		// below info can be used in future if so required
	    		/*boolean isPrincipalUnit = teamAssignment.getIsPrincipalUnit();
	    		if (isPrincipalUnit)
	    		{
	    			uiUserTeams.setPrincipleUnitID(unitID);
	    		}*/
	    		assignments.addAssignmentObject(uiAssignment);
	    	}
    	}
    	finally
    	{
    		// teamAssignments do wrap NOM xml structures, so cleanup
    		if (teamAssignments != null)
    		{
    	    	teamAssignments.cleanup();
    		}
    	}
    	return uiTeamUsers;
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	// Updates will be done by user by reusing the Teams/Team functionality in de domain layer. This will also take care
    	// of setting the principle unit properly. To be added/removed assignments are determined by user.
    	String unitID = this.getUnitID();
    	// hashmap for all assignments from tuple-old/new by seqNo
    	HashMap<Integer, UITeamUsers.Assignments.Assignment> allAssignments = new HashMap<Integer, UITeamUsers.Assignments.Assignment>();
    	// assigned setting for each assignment by seqNo
    	HashMap<Integer, Boolean> assigned = new HashMap<Integer, Boolean>();
    	// map of users plus list of user related assignments
    	HashMap<String, ArrayList<Integer>> userAssignment = new HashMap<String, ArrayList<Integer>>();
    	// collect data from tuple-old
    	UITeamUsers origTeamUsers = (UITeamUsers)this.getOriginalObject();
    	BusObjectIterator<UITeamUsers.Assignments.Assignment> origAssignments = origTeamUsers.getAssignmentsObject().getAssignmentObjects();
    	while (origAssignments.hasMoreElements())
    	{
    		UITeamUsers.Assignments.Assignment origAssignment = (UITeamUsers.Assignments.Assignment)origAssignments.nextElement();
    		int seqNo = origAssignment.getSeqNo();
    		String orgUserDN = origAssignment.getOrgUserDN();
    		allAssignments.put(seqNo, origAssignment);
    		// initially, put assigned to false - from the tuple-new, we will determine if it should be put to true
    		assigned.put(seqNo, false);
    		// add assignment to user list
    		ArrayList<Integer> userAssignments = null;
    		if (userAssignment.containsKey(orgUserDN))
    		{
    			userAssignments = userAssignment.get(orgUserDN);
    		}
    		else
    		{
    			userAssignments = new ArrayList<Integer>();
    			userAssignment.put(orgUserDN, userAssignments);
    		}
    		userAssignments.add(seqNo);
    	}
    	// collect data from tuple-new
    	BusObjectIterator<UITeamUsers.Assignments.Assignment> newAssignments = this.getAssignmentsObject().getAssignmentObjects();
    	while (newAssignments.hasMoreElements())
    	{    	
    		UITeamUsers.Assignments.Assignment newAssignment = (UITeamUsers.Assignments.Assignment)newAssignments.nextElement();
    		int seqNo = newAssignment.getSeqNo();
    		String orgUserDN = newAssignment.getOrgUserDN();
    		if (!allAssignments.containsKey(seqNo))
    		{
        		allAssignments.put(seqNo, newAssignment);
        		// add assignment to user list
        		ArrayList<Integer> userAssignments = null;
        		if (userAssignment.containsKey(orgUserDN))
        		{
        			userAssignments = userAssignment.get(orgUserDN);
        		}
        		else
        		{
        			userAssignments = new ArrayList<Integer>();
        			userAssignment.put(orgUserDN, userAssignments);
        		}
        		userAssignments.add(seqNo);
    		}
    		// determine assigned
    		assigned.put(seqNo, newAssignment.getAssigned());
    	}
    	// as we have all the data now, and also by user, we can see by user if
    	// any teams to be assigned or unassigned
    	for (String orgUserDN : userAssignment.keySet())
    	{
    		Teams assignTeams = new Teams();
    		Teams unassignTeams = new Teams();
    		ArrayList<Integer> userAssignments = userAssignment.get(orgUserDN);
    		for (int seqNo : userAssignments)
    		{
	    		UITeamUsers.Assignments.Assignment assignment = allAssignments.get(seqNo);
	    		String assignmentID = assignment.getAssignmentID();
	    		if (Util.isSet(assignmentID) && !assigned.get(seqNo))
	    		{
	    			// existing assignment but not assigned anymore, so for removal
	    			Team team = new Team();
	    			team.setUnitID(unitID);
	    			Role role = new Role();
	    			role.setDN(assignment.getRoleDN());
	    			team.setRoleObject(role);
	    			unassignTeams.addTeamObject(team);
	    		}
	    		else if (!Util.isSet(assignmentID) && assigned.get(seqNo))
	    		{
	    			// not existing yet; newly assigned
	    			Team team = new Team();
	    			team.setUnitID(unitID);
	    			Role role = new Role();
	    			role.setDN(assignment.getRoleDN());
	    			team.setRoleObject(role);
	    			assignTeams.addTeamObject(team);
	    		}
    		}
    		// delegate
    		Teams.maintainTeams(orgUserDN, assignTeams, unassignTeams);
    	}
        // read back 
   		UITeamUsers actualTeamUsers = UITeamUsers.getUITeamUsers(unitID);
        if (actualTeamUsers != null)
        {
        	UITeamUsers.Assignments actualAssignments = actualTeamUsers.getAssignmentsObject();
        	UITeamUsers.Assignments uiAssignments = new UITeamUsers.Assignments(new BusObjectConfig(actualAssignments, BusObjectConfig.TRANSIENT_OBJECT));
        	this.setAssignmentsObject(uiAssignments);
        } 
    }

    public void onDelete()
    {
    	// N.A.
    }

    public static class Assignments extends UITeamUsers.AssignmentsBase
    {
        public Assignments()
        {
            this((BusObjectConfig)null);
        }

        public Assignments(BusObjectConfig config)
        {
            super(config);
        }

        public void onInsert()
        {
        }

        public void onUpdate()
        {
        }

        public void onDelete()
        {
        }

        public static class Assignment extends UITeamUsers.Assignments.AssignmentBase
        {
            public Assignment()
            {
                this((BusObjectConfig)null);
            }

            public Assignment(BusObjectConfig config)
            {
                super(config);
            }

            public void onInsert()
            {
            }

            public void onUpdate()
            {
            }

            public void onDelete()
            {
            }

        }
    }
}
