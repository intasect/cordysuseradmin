/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin;

import java.util.ArrayList;
import java.util.HashMap;

import com.cordys.coe.tools.useradmin.ui.UIAssignments;
import com.cordys.coe.tools.useradmin.ui.UIListItem;
import com.cordys.coe.tools.useradmin.ui.UIMultipleUser;
import com.cordys.coe.tools.useradmin.ui.UIUserUpdateData;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;


/**
 * Domain class for Teams
 * 
 * @author kekema
 *
 */
public class Teams extends TeamsBase
{
    public Teams()
    {
        this((BusObjectConfig)null);
    }

    public Teams(BusObjectConfig config)
    {
        super(config);
    }
    
    /**
     * Insert/Delete user team assignments
     * 
     * @param orgUserDN
     * @param assignTeams
     * @param unassignTeams
     */    
    public static void maintainTeams(String orgUserDN, Teams assignTeams, Teams unassignTeams)
    {
    	if (assignTeams != null)
    	{
    		assignTeams.assignToUser(orgUserDN);
    	}
    	if (unassignTeams != null)
    	{
    		unassignTeams.unassignFromUser(orgUserDN);
    	}
    }
    
    /**
     * Assign inner teams to the user as per the indicated role
     * 
     * @param orgUserDN
     */
    public void assignToUser(String orgUserDN)
    {
    	BusObjectIterator<Team> teams = getTeamObjects();
    	if (teams.hasMoreElements())
    	{
	    	HashMap<String, String> unitIDsByQName = null;
	    	HashMap<String, String> allRolesByName = null;
	    	unitIDsByQName = com.cordys.coe.tools.useradmin.cordys.Unit.getUnitIDsByQName();
	    	allRolesByName = com.cordys.coe.tools.useradmin.cordys.Role.getAllRolesByName();
	    	// use MultipleUser maitain teams logic
	    	// TODO: move that logic to domain level instead of UI level
	    	UIUserUpdateData updateData = new UIUserUpdateData();
	    	updateData.makeTransient();
	    	UIAssignments assignments = new UIAssignments();
	    	updateData.setAssignmentsObject(assignments);
	    	// take care of passing any set principle unit as first assignment
	    	ArrayList<Team> teamList = new ArrayList<Team>();
	    	boolean havePrincipleUnitAlwaysSet = false;
	    	while (teams.hasMoreElements())
	    	{
	    		Team team = (Team)teams.nextElement();
	    		if (team.getIsPrinciple())
	    		{
	    			// derive list item from team assignment
	    			UIListItem listItem = team.getListItem(unitIDsByQName, allRolesByName);
	    			if (listItem != null)
	    			{
	    				assignments.addUIListItemObject(listItem);
	    				havePrincipleUnitAlwaysSet = true;
	    			}
	    		}
	    		else
	    		{
		    		teamList.add(team);
	    		}
	    		
	    	}
	    	// add non principle ones
	    	for (Team team : teamList)
	    	{
    			UIListItem listItem = team.getListItem(unitIDsByQName, allRolesByName);
    			if (listItem != null)
    			{
    				assignments.addUIListItemObject(listItem);
    			}
	    	}
	    	UIMultipleUser.maintainTeams(orgUserDN, UIMultipleUser.AC_ASSIGN_TEAMS, updateData, havePrincipleUnitAlwaysSet);
    	}
    }
    
    /**
     * Unassign inner teams from the user as per the indicated role
     * 
     * @param orgUserDN
     */
    public void unassignFromUser(String orgUserDN)
    {
    	BusObjectIterator<Team> teams = getTeamObjects();
    	if (teams.hasMoreElements())
    	{
	    	HashMap<String, String> unitIDsByQName = null;
	    	HashMap<String, String> allRolesByName = null;
	    	unitIDsByQName = com.cordys.coe.tools.useradmin.cordys.Unit.getUnitIDsByQName();
	    	allRolesByName = com.cordys.coe.tools.useradmin.cordys.Role.getAllRolesByName();
	    	UIUserUpdateData updateData = new UIUserUpdateData();
	    	updateData.makeTransient();
	    	UIAssignments assignments = new UIAssignments();
	    	updateData.setAssignmentsObject(assignments);
	    	while (teams.hasMoreElements())
	    	{
	    		Team team = (Team)teams.nextElement();
    			UIListItem listItem = team.getListItem(unitIDsByQName, allRolesByName);
    			if (listItem != null)
    			{
    				assignments.addUIListItemObject(listItem);
    			}
	    	}
	    	UIMultipleUser.maintainTeams(orgUserDN, UIMultipleUser.AC_UNASSIGN_TEAMS, updateData, false);
    	}
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	// N.A.    	
    }

    public void onDelete()
    {
    	// N.A.    	
    }

}
