
<XFormRuntime
	xmlns:cws="http://schemas.cordys.com/cws/1.0"
	type="com.cordys.xforms.XFormRuntime"
	typeVersion="002481EE-993D-11E2-E030-02C88B2B3B65 0019B981-E9E3-11DF-FAD3-F797D376BD43"
	RuntimeDocumentID="005056C0-0008-11E0-F362-E14BA081B53D">
	<DocumentID>0027132C-F779-11E2-F8FA-CE72EC223D2A</DocumentID>
	<Name>usermanager</Name>
	<Description>usermanager</Description>
	<CreatedBy>cordysadm</CreatedBy>
	<CreationDate>2013-05-28T20:44:42.577</CreationDate>
	<Notes/>
	<BinaryReferenceInfo></BinaryReferenceInfo>
	<ISVPName></ISVPName>
	<XFormContent>
		<xformhtml
			xmlns="http://schemas.cordys.com/1.0/xform"
			xmlns:cws="http://schemas.cordys.com/cws/1.0"
			xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/"
			xmlns:xforms="http://www.w3.org/2002/xforms/cr"
			xmlns:ev="http://www.w3.org/2001/xml-events"
			xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
			xformsversion="2"
			key="usermanager/User Manager"
			focusatstartup="true"
			uiTaskID="005056C0-0008-11E0-F362-E14BA081B53D"
			wcpforms:name="usermanager"
			wcpforms:description="User Manager"
			projectLanguage="en-US">
			<xhead>
				<script
					src="wcp/usermanager/manager.js"
				/>
				<xforms:model
					id="DummyModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onsoapfault">
						<xforms:model_OnSOAPFault/>
					</xforms:action>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:DummyModel_OnRequest/>
					</xforms:action>
				</xforms:model>
				<xforms:model
					id="DeleteAuthUsersModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onsoapfault">
						<xforms:DeleteAuthUsersModel_OnSOAPFault/>
					</xforms:action>
				</xforms:model>
				<xforms:model
					id="UpdateLDAPModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onsoapfault">
						<xforms:model_OnSOAPFault/>
					</xforms:action>
				</xforms:model>
				<xforms:model
					id="RightcontainerModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onallviewsrefresh"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onactivebusinessobject"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-insert"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onafterinsert"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-delete"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onafterdelete"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-change"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onafterchange"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms_onfind"
						assignments="RightcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onbeforerender"
						assignments="RightcontainerModel_assignments"
					/>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="mm1">http://schemas.cordys.com/eibus/artifact/1.0</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					xmlns:xforms="http://www.w3.org/2002/xforms/cr"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					id="GetUserDetailsOperationModel"
					wcpforms:businessElement="GetUserDetailsResponse"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:nontransactional="true"
					singleTransaction="false"
					promptToSave="true"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							src="http://schemas.cordys.com/1.0/ldap/GetUserDetails"
							type="get"
							wcpforms:wsguid="215481b4-68e5-426e-8d99-f95201c48ea6">
							<dn
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:GetUserDetailsOperationModel_OnRequest/>
					</xforms:action>
					<xforms:action
						ev:event="xforms-onsoapfault">
						<xforms:GetUserDetailsOperationModel_OnSOAPFault/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					xmlns:xforms="http://www.w3.org/2002/xforms/cr"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					id="GetLDAPObjectOperationModel"
					wcpforms:businessElement="GetLDAPObjectResponse"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:nontransactional="true"
					singleTransaction="false"
					promptToSave="true"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					associatedmodel="">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							src="http://schemas.cordys.com/1.0/ldap/GetLDAPObject"
							type="get"
							wcpforms:wsguid="a4019737-97fd-4b02-b8a2-b268cf333ce9">
							<dn
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:GetLDAPObjectOperationModel_OnRequest/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					id="LeftcontainerModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onallviewsrefresh"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onactivebusinessobject"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-insert"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onafterinsert"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-delete"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onafterdelete"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-change"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onafterchange"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms_onfind"
						assignments="LeftcontainerModel_assignments"
					/>
					<xforms:action
						ev:event="xforms-onbeforerender"
						assignments="LeftcontainerModel_assignments"
					/>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="mm1">http://schemas.cordys.com/eibus/artifact/1.0</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					id="AuthUsersModel"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="SearchLDAPResponse"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp">
					<xforms:instance
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						wcpforms:timeout="30000"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
							src="http://schemas.cordys.com/1.0/ldap/SearchLDAP"
							type="get"
							wcpforms:wsguid="7f983b36-2c80-43cd-bad0-51abf2153591">
							<dn
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<scope
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<filter
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<sort
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<returnValues
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:AuthUsersModel_OnRequest/>
					</xforms:action>
					<xforms:action
						ev:event="xforms-onbeforesynchronize">
						<xforms:Model_BeforeSynchronize/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					id="LeftRolesModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					id="RightRolesModel"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:automatic="false"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					wcpforms:businessElement="entry">
					<xforms:instance
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						wcpforms:timeout=""
						wcpforms:iteratorSize="50"
					/>
					<wcpforms:instanceschema/>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					xmlns:xforms="http://www.w3.org/2002/xforms/cr"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					id="SearchLDAPModel"
					wcpforms:businessElement="SearchLDAPResponse"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:nontransactional="true"
					singleTransaction="false"
					promptToSave="true"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					associatedmodel="">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							src="http://schemas.cordys.com/1.0/ldap/SearchLDAP"
							type="get"
							wcpforms:wsguid="7f983b36-2c80-43cd-bad0-51abf2153591">
							<dn
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<scope
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<filter
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<sort
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
							<returnValues
								xmlns="http://schemas.cordys.com/1.0/ldap"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:SearchLDAPModel_OnRequest/>
					</xforms:action>
					<xforms:action
						ev:event="xforms-onresponse">
						<xforms:SearchLDAPModel_OnResponse/>
					</xforms:action>
					<xforms:action
						ev:event="xforms-onsoapfault">
						<xforms:model_OnSOAPFault/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/1.0/ldap</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					xmlns:xforms="http://www.w3.org/2002/xforms/cr"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					id="TaskModel"
					wcpforms:businessElement="Task"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					singleTransaction="false"
					promptToSave="false"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:timeout="90000"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							src="http://schemas.cordys.com/task/1.0/runtime//GetTaskCollection"
							type="get"
							wcpforms:wsguid="7c1a1e24-e413-4d08-879b-436a9e18aaae">
							<Task
								xmlns="http://schemas.cordys.com/task/1.0/runtime/"
								id=""
								detail=""
								acl="true"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:TaskModel_OnRequest/>
					</xforms:action>
					<xforms:action
						ev:event="xforms-onsoapfault">
						<xforms:model_OnSOAPFault/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/task/1.0/runtime/</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/task/1.0/runtime/</wcpforms:namespace>
						<wcpforms:namespace
							prefix="ns1">http://schemas.cordys.com/task/1.0/</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/task/1.0/</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					xmlns:xforms="http://www.w3.org/2002/xforms/cr"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					id="GetUnitsForAssignmentsModel"
					wcpforms:businessElement="GetUnitsForAssignmentsResponse"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:nontransactional="true"
					singleTransaction="false"
					promptToSave="true"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					associatedmodel="">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							src="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0/GetUnitsForAssignments"
							type="get"
							wcpforms:wsguid="6921fd5c-e9e8-42b7-823f-52e90aa22724">
							<WorkspaceID
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
							<AssignmentRoot
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
							<Filter
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
							<UseRegEx
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:GetUnitsForAssignmentsModel_OnRequest/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xforms:model
					xmlns:xforms="http://www.w3.org/2002/xforms/cr"
					xmlns:ev="http://www.w3.org/2001/xml-events"
					xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
					id="RemoveUnitAndAssignmentsModel"
					wcpforms:businessElement="RemoveUnitAndAssignmentsResponse"
					wcpforms:automatic="false"
					wcpforms:gateway="com.eibus.web.soap.Gateway.wcp"
					wcpforms:nontransactional="true"
					singleTransaction="false"
					promptToSave="true"
					isConstraintValidation="false"
					isInitializationRequired="false"
					isApplyAccessControl="false"
					associatedmodel="">
					<xforms:instance
						xmlns:xforms="http://www.w3.org/2002/xforms/cr"
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms"
						wcpforms:iteratorSize="50">
						<wcpforms:dataset
							src="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0/RemoveUnitAndAssignments"
							type="get"
							wcpforms:wsguid="6921fd5c-e9e8-42b7-823f-52e90aa22724">
							<WorkspaceID
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
							<AssignmentRoot
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
							<UnitName
								xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
							/>
						</wcpforms:dataset>
					</xforms:instance>
					<wcpforms:instanceschema/>
					<xforms:action
						ev:event="xforms-onrequest">
						<xforms:RemoveUnitAndAssignmentsModel_OnRequest/>
					</xforms:action>
					<wcpforms:xpathmetainfo
						xmlns:wcpforms="http://schemas.cordys.com/wcp/xforms">
						<wcpforms:namespace
							prefix="xmlns">http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</wcpforms:namespace>
						<wcpforms:namespace
							prefix="tns">http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</wcpforms:namespace>
						<wcpforms:namespace
							prefix="um">http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</wcpforms:namespace>
					</wcpforms:xpathmetainfo>
				</xforms:model>
				<xml
					xmlns="http://schemas.cordys.com/1.0/xform">
					<xml
						id="LeftcontainerModel_assignments">
						<Assignments>
							<Assignment>
								<Source>LeftcontainerModel/SearchLDAP/SearchLDAPResponse/tuple/old/entry/@dn</Source>
								<Target>artifactviewerLeft/mm1:schema/mm1:id</Target>
							</Assignment>
							<Assignment>
								<Source>LeftcontainerModel/SearchLDAP/SearchLDAPResponse/tuple/old/entry/um:cn/um:string/text()</Source>
								<Target>artifactviewerLeft/mm1:schema/mm1:name</Target>
							</Assignment>
							<Assignment>
								<Source>LeftcontainerModel/SearchLDAP/SearchLDAPResponse/tuple/old/entry/um:additionalinfo/um:userid/text()</Source>
								<Target>artifactviewerLeft/mm1:schema/mm1:description</Target>
							</Assignment>
							<Assignment>
								<Source>LeftcontainerModel/SearchLDAP/SearchLDAPResponse/tuple/old/entry/um:additionalinfo/um:count/text()</Source>
								<Target>artifactviewerLeft/mm1:schema/mm1:info</Target>
							</Assignment>
							<Assignment>
								<Source>LeftcontainerModel/SearchLDAP/SearchLDAPResponse/tuple/old/entry/um:additionalinfo/um:icon/text()</Source>
								<Target>artifactviewerLeft/mm1:schema/mm1:icon</Target>
							</Assignment>
							<Assignment>
								<Source>LeftcontainerModel/SearchLDAP/SearchLDAPResponse/tuple/old/entry/.</Source>
								<Target>artifactviewerLeft/mm1:schema/mm1:applicationDefinition</Target>
							</Assignment>
							<Namespace
								prefix="um">http://schemas.cordys.com/1.0/ldap</Namespace>
							<Namespace
								prefix="mm1">http://schemas.cordys.com/eibus/artifact/1.0</Namespace>
						</Assignments>
					</xml>
					<xml
						id="RightcontainerModel_assignments">
						<Assignments>
							<Assignment>
								<Source>RightcontainerModel/Rightcontainer/RightcontainerResponse/data/tuple/old/entry/@dn</Source>
								<Target>artifactviewerRight/mm1:schema/mm1:id</Target>
							</Assignment>
							<Assignment>
								<Source>RightcontainerModel/Rightcontainer/RightcontainerResponse/data/tuple/old/entry/um:cn/um:string/text()</Source>
								<Target>artifactviewerRight/mm1:schema/mm1:name</Target>
							</Assignment>
							<Assignment>
								<Source>RightcontainerModel/Rightcontainer/RightcontainerResponse/data/tuple/old/entry/um:additionalinfo/um:userid/text()</Source>
								<Target>artifactviewerRight/mm1:schema/mm1:description</Target>
							</Assignment>
							<Assignment>
								<Source>RightcontainerModel/Rightcontainer/RightcontainerResponse/data/tuple/old/entry/um:additionalinfo/um:roles/text()</Source>
								<Target>artifactviewerRight/mm1:schema/mm1:info</Target>
							</Assignment>
							<Assignment>
								<Source>RightcontainerModel/Rightcontainer/RightcontainerResponse/data/tuple/old/entry/um:additionalinfo/um:icon/text()</Source>
								<Target>artifactviewerRight/mm1:schema/mm1:icon</Target>
							</Assignment>
							<Assignment>
								<Source>RightcontainerModel/Rightcontainer/RightcontainerResponse/data/tuple/old/entry/.</Source>
								<Target>artifactviewerRight/mm1:schema/mm1:applicationDefinition</Target>
							</Assignment>
							<Namespace
								prefix="um">http://schemas.cordys.com/1.0/ldap</Namespace>
							<Namespace
								prefix="mm1">http://schemas.cordys.com/eibus/artifact/1.0</Namespace>
						</Assignments>
					</xml>
					<xml
						id="mainReq">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body/>
						</SOAP:Envelope>
					</xml>
					<xml
						id="searchLDAP">
						<SearchLDAP
							xmlns="http://schemas.cordys.com/1.0/ldap">
							<dn/>
							<scope/>
							<returnValues/>
							<filter/>
							<sort/>
						</SearchLDAP>
					</xml>
					<xml
						id="userdetails">
						<Application>
							<description>User Details</description>
							<caption>User Details</caption>
							<url>usermanager/cloneuser.caf</url>
							<id>userdetails</id>
							<frame
								features="dialogHeight:85%;dialogWidth:80%;"
							/>
							<data/>
						</Application>
					</xml>
					<xml
						id="userprofile">
						<Application>
							<description>User Profile</description>
							<caption>User Profile</caption>
							<url>usermanager/userprofile.caf</url>
							<id>userprofile</id>
							<frame
								features="dialogHeight:85%;dialogWidth:80%;"
							/>
							<data/>
						</Application>
					</xml>
					<xml
						id="configureUsersAppDefinition">
						<Application>
							<description>Configure Users</description>
							<caption>Configure Users</caption>
							<url>usermanager/configureusers.caf</url>
							<id>cordys_ciui_configureusers</id>
							<frame
								features="dialogHeight:60%;dialogWidth:90%;"
							/>
							<data/>
						</Application>
					</xml>
					<xml
						id="actionnode">
						<Action>
							<entry
								namespace="http://schemas.cordys.com/1.0/ldap">
								<Insert/>
							</entry>
						</Action>
					</xml>
					<xml
						id="requestnode">
						<request>
							<dataset
								type="get">
								<dn/>
							</dataset>
						</request>
					</xml>
					<xml
						id="deleteRecursiveXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<DeleteRecursive
									xmlns="http://schemas.cordys.com/1.0/ldap">
									<tuple>
										<old/>
									</tuple>
								</DeleteRecursive>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="requestForGetRoles">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetRoles
									xmlns="http://schemas.cordys.com/1.0/ldap">
									<dn>o=system,cn=cordys,o=vanenburg.com</dn>
								</GetRoles>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="requestForGetRolesByType">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetRolesByType
									xmlns="http://schemas.cordys.com/1.1/ldap">
									<type/>
								</GetRolesByType>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="updateLDAPInfo">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<Update
									xmlns="http://schemas.cordys.com/1.0/ldap"
								/>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="publishConfigTask">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<PublishConfiguredTasks
									xmlns="http://schemas.cordys.com/task/1.0/designtime/"
								/>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="getUsersForRoleXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetUsersForRole
									xmlns="http://schemas.cordys.com/1.0/ldap">
									<dn/>
									<role/>
									<sort/>
								</GetUsersForRole>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="GetConfiguredTasksRequest">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetConfiguredTasks
									xmlns="http://schemas.cordys.com/task/1.0/runtime/">
									<ConfiguredTasks/>
								</GetConfiguredTasks>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="GetTasksForUserRequest">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetTasksForUser
									xmlns="http://schemas.cordys.com/task/1.0/runtime/">
									<User/>
								</GetTasksForUser>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="GetTasksForRoleRequest">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetTasksForRoles
									xmlns="http://schemas.cordys.com/task/1.0/runtime/">
									<Role
										dn=""
									/>
								</GetTasksForRoles>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="initializeRequestXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<InitializeAssignmentRoot
									xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0">
									<WorkspaceID>CWS Development</WorkspaceID>
									<AssignmentRoot>CIUIRoot</AssignmentRoot>
									<Create>true</Create>
								</InitializeAssignmentRoot>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="GetUsersForTeamRequest">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetAssignments
									xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0">
									<WorkspaceID>CWS Development</WorkspaceID>
									<AssignmentRoot/>
									<UnitID/>
									<RoleDN/>
									<UserDN/>
									<Filter/>
									<cursor/>
									<EffectiveOnly>false</EffectiveOnly>
								</GetAssignments>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="removeAssignmentsXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<RemoveAssignments
									xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0">
									<WorkspaceID>CWS Development</WorkspaceID>
									<AssignmentRoot/>
									<Assignments>
										<dataset/>
									</Assignments>
									<DoPublish>true</DoPublish>
								</RemoveAssignments>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="getUnitsForAssignmentsXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetUnitsForAssignments
									xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0">
									<WorkspaceID>__Organization Staging__</WorkspaceID>
									<AssignmentRoot/>
									<Filter/>
									<UseRegEx>false</UseRegEx>
								</GetUnitsForAssignments>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="getWorkspaceIDXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<getOrganizationStagingWorkspaceID
									xmlns="http://schemas.cordys.com/cws/runtime/types/workspace/ISVPStagingSpace/1.0">
									<WorkspaceID>ISVP Staging</WorkspaceID>
									<organizationDN/>
								</getOrganizationStagingWorkspaceID>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
					<xml
						id="getUnitRolesXML">
						<SOAP:Envelope
							xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
							<SOAP:Body>
								<GetUnitRoles
									xmlns="http://schemas.cordys.com/userassignment/UserAssignmentService/1.0"
									jobID="">
									<WorkspaceID>PARAMETER</WorkspaceID>
									<UnitID>PARAMETER</UnitID>
								</GetUnitRoles>
							</SOAP:Body>
						</SOAP:Envelope>
					</xml>
				</xml>
			</xhead>
			<xbody>
				<xforms:group
					wcpforms:layout="free"
					id="xbody_group"
					wcpforms:labelalign="ontop">
					<xforms:group
						appearance="box"
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsGroupbox"
						id="groupboxLeft"
						isNavigationEnabled="true"
						wcpforms:layout="vertical"
						wcpforms:class="f_layout"
						wcpforms:size="auto auto"
						wcpforms:anchors="10px 80px 50% 3px"
						wcpforms:position="10px 80px"
						wcpforms:labelalign="ontop">
						<xforms:group
							appearance="elementbar"
							id="_elementBar"
							wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbar"
							wcpforms:class="elementbar">
							<xforms:group
								appearance="controlbar"
								id="_controlBar"
								wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsControlbar"
								wcpforms:class="controlbar">
								<xforms:trigger
									wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbarItem"
									id="newID"
									wcpforms:class="item">
									<xforms:label>
										<img
											xmlns="http://schemas.cordys.com/1.0/xform"
											src="wcp/theme/default/icon/action/add.png"
										/>
									</xforms:label>
									<xforms:action
										ev:event="xforms-activate">
										<xforms:newID_Click/>
									</xforms:action>
								</xforms:trigger>
								<xforms:trigger
									wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbarItem"
									id="batchuser"
									wcpforms:class="item">
									<xforms:label>
										<img
											xmlns="http://schemas.cordys.com/1.0/xform"
											src="wcp/theme/default/icon/action/add_multiple.png"
										/>
									</xforms:label>
									<xforms:action
										ev:event="xforms-activate">
										<xforms:batchuser_Click/>
									</xforms:action>
								</xforms:trigger>
								<xforms:trigger
									wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbarItem"
									id="usermenu"
									wcpforms:class="item">
									<xforms:label>
										<img
											xmlns="http://schemas.cordys.com/1.0/xform"
											src="wcp/theme/default/icon/interface/menu.png"
										/>
									</xforms:label>
									<xforms:action
										ev:event="xforms-activate">
										<xforms:usermenu_Click/>
									</xforms:action>
								</xforms:trigger>
								<xforms:trigger
									wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbarItem"
									id="defaultContext"
									wcpforms:class="item"
									availableFalseMode="hide"
									taskPartId="005056C0-0008-71DF-B590-072EA75C0C4D">
									<xforms:label>
										<img
											xmlns="http://schemas.cordys.com/1.0/xform"
											src="wcp/theme/default/icon/authorization/organization.png"
										/>
									</xforms:label>
									<xforms:action
										ev:event="xforms-activate">
										<xforms:defaultContext_Click/>
									</xforms:action>
								</xforms:trigger>
							</xforms:group>
						</xforms:group>
						<xforms:label
							wcpforms:class="groupheader">Users</xforms:label>
						<wcpforms:uicontrol
							htmlElement="div"
							xformextendedname="artifactviewer"
							id="artifactviewerLeft"
							sortOnInitialize="true"
							wcpforms:customclass="artifactviewer vertical"
							namespace="cas.xforms.runtimelibrary.ArtifactViewer"
							wcpforms:designLibrary="cas.xforms.designerlibrary.controls.extensions.ArtifactViewer"
							header="hide"
							viewMode="Detail"
							artifactsDirection="vertical"
							enableContextMenu="true"
							artifactFactoryClass="LeftContainerType"
							model="LeftcontainerModel"
							artifactType="leftcontainer"
							enableFind="false"
							multipleSelect="true"
							allowPersonalizedViews=""
							savePreferences="true"
							wcpforms:layout="vertical"
							wcpforms:class="f_layout"
							wcpforms:size="auto auto"
							wcpforms:anchors="0px 0px 0px 0px"
							wcpforms:position="0px 0px"
						/>
						<xforms:label
							appearance="richtext"
							id="emptyLable"
							wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsRichtext"
							textIdentifier="005056C0-0008-11E0-F312-C4717304B53C"
							wcpforms:class="f_layout"
							wcpforms:size="auto auto"
							wcpforms:anchors="25% 40% 10% 178px"
							wcpforms:position="25% 40%">
							<![CDATA[<P></P>]]>
						</xforms:label>
					</xforms:group>
					<xforms:group
						appearance="box"
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsGroupbox"
						id="groupboxRight"
						isNavigationEnabled="true"
						wcpforms:layout="vertical"
						wcpforms:class="f_layout"
						wcpforms:size="auto auto"
						wcpforms:anchors="50.5% 104px 3px 3px"
						wcpforms:position="50.5% 104px"
						wcpforms:labelalign="ontop">
						<xforms:label
							wcpforms:class="groupheader">Roles</xforms:label>
						<wcpforms:uicontrol
							htmlElement="div"
							xformextendedname="artifactviewer"
							id="artifactviewerRight"
							sortOnInitialize="true"
							wcpforms:customclass="artifactviewer vertical"
							namespace="cas.xforms.runtimelibrary.ArtifactViewer"
							wcpforms:designLibrary="cas.xforms.designerlibrary.controls.extensions.ArtifactViewer"
							header="hide"
							viewMode="Detail"
							artifactsDirection="vertical"
							enableContextMenu="true"
							artifactFactoryClass="RightContainerType"
							model="RightcontainerModel"
							artifactType="rightcontainer"
							enableFind="true"
							multipleSelect="true"
							allowPersonalizedViews=""
							savePreferences="true"
							cursor="no"
							wcpforms:layout="vertical"
							wcpforms:class="f_layout"
							wcpforms:size="auto auto"
							wcpforms:anchors="0px 0px 0px 0px"
							wcpforms:position="0px 0px"
						/>
					</xforms:group>
					<xforms:select1
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsSelect"
						id="selectview"
						doEBIValidate="false"
						initializeValueSets="0"
						wcpforms:enumerated="false"
						multiple="false"
						wcpforms:dataType="string"
						wcpforms:textalign="left_align"
						wcpforms:class="f_layout"
						wcpforms:size="160px auto"
						wcpforms:position="42px 20px">
						<xforms:label
							wcpforms:class="v_label removed">Select view</xforms:label>
						<xforms:action
							ev:event="xforms-value-changed">
							<xforms:selectview_Change/>
						</xforms:action>
						<xforms:hint>Select view</xforms:hint>
						<xforms:item
							xmlns:xforms="http://www.w3.org/2002/xforms/cr">
							<xforms:label>--Select View--</xforms:label>
							<xforms:value/>
						</xforms:item>
						<xforms:item>
							<xforms:label>Users - Roles</xforms:label>
							<xforms:value>UR</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>Roles - Roles</xforms:label>
							<xforms:value>RR</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>Roles - Users</xforms:label>
							<xforms:value>RU</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>Roles - Tasks</xforms:label>
							<xforms:value>RT</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>Users - Tasks</xforms:label>
							<xforms:value>UT</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>Teams - Users</xforms:label>
							<xforms:value>OUU</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>Users - Teams</xforms:label>
							<xforms:value>UOU</xforms:value>
						</xforms:item>
					</xforms:select1>
					<xforms:select1
						appearance="check"
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsCheck"
						id="roleTypeCheck"
						doEBIValidate="false"
						wcpforms:class="f_layout"
						wcpforms:size="160px auto"
						wcpforms:position="240px 20px">
						<xforms:label
							wcpforms:class="autosuggest">Include internal roles</xforms:label>
						<xforms:hint>Select to view or assign the internal roles</xforms:hint>
						<xforms:item>
							<xforms:label>true</xforms:label>
							<xforms:value>1</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>false</xforms:label>
							<xforms:value>0</xforms:value>
						</xforms:item>
						<xforms:action
							ev:event="xforms-value-changed">
							<xforms:roleTypeCheck_Change/>
						</xforms:action>
						<xforms:label/>
						<xforms:item>
							<xforms:label>true</xforms:label>
							<xforms:value>1</xforms:value>
						</xforms:item>
						<xforms:item>
							<xforms:label>false</xforms:label>
							<xforms:value>0</xforms:value>
						</xforms:item>
					</xforms:select1>
					<xforms:input
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsInput"
						id="searchInput"
						doEBIValidate="false"
						wcpforms:class="f_layout"
						wcpforms:size="190px auto"
						wcpforms:position="42px 50px">
						<xforms:label
							textIdentifier=""
							wcpforms:class="v_label removed"
						/>
					</xforms:input>
					<xforms:group
						appearance="controlbox"
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsControlbox"
						id="controlbox1"
						controltype="button"
						wcpforms:layout="horizontal"
						wcpforms:class="f_layout"
						wcpforms:align="left_align"
						wcpforms:size="121px 27px"
						wcpforms:position="240px 45px">
						<xforms:trigger
							wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsButton"
							id="searchButton"
							wcpforms:class="h_button"
							wcpforms:size="10.01em 1.64em">
							<xforms:label
								textIdentifier="005056C0-0008-11E0-F3AA-806CFE54D540">Search</xforms:label>
							<xforms:action
								ev:event="xforms-activate">
								<xforms:searchButton_Click/>
							</xforms:action>
						</xforms:trigger>
					</xforms:group>
					<xforms:group
						appearance="controlbox"
						wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsControlbox"
						id="controlbox2"
						controltype="button"
						wcpforms:layout="horizontal"
						wcpforms:class="f_layout"
						wcpforms:align="left_align"
						wcpforms:size="121px 27px"
						wcpforms:position="370px 45px">
						<xforms:trigger
							wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsButton"
							id="showAllButton"
							wcpforms:class="h_button"
							wcpforms:size="10.01em 1.64em">
							<xforms:label
								textIdentifier="005056C0-0008-11E1-E189-59312E549FA6">Show All</xforms:label>
							<xforms:action
								ev:event="xforms-activate">
								<xforms:showAllButton_Click/>
							</xforms:action>
						</xforms:trigger>
					</xforms:group>
				</xforms:group>
				<div
					xmlns="http://www.w3.org/2002/xforms/cr"
					id="statusbarId"
					xformextendedname="StatusBar"
					namespace="wcp.library.ui.StatusBar"
					wcpforms:designLibrary="cas.xforms.designerlibrary.controls.extensions.StatusBar"
					contentElementId="xbody_group"
					position="footer">
					<table
						xmlns=""
						width="100%"
						border="1">
						<tr
							valign="top">
							<td
								width="100%"
								id="NewPanel1"> </td>
						</tr>
					</table>
				</div>
			</xbody>
			<xformsscript>
				<![CDATA[var gRequestCount = 0;
var gSoapfault = false;
var gSelectednode = null;
var gFilterFlag = 0;
var gTaskFlag = 0;
var gLeftSelectedArtifacts = [];
var gSearchString = null;
var gselectStartFlag = 0;
var gTimeOutFalg;
var htmlutilId = null;
var gCommon=true;//set the gCommon variable depending on whether all the selected users have the same status enable/disable
var gBoolIsvpOrOrgTeam;

function Form_Init(eventObject)
{
    cordys.addDOMListener(artifactviewerLeft, "onclick", onAVLeftOnClick);
    application.importLibrary("/cordys/wcp/admin/library/util/xmlhelper.htm");
    application.importLibrary("/cordys/wcp/admin/library/util/dateutil.htm");

    gCurrentOrganization = application.organization;
    gLDAPRoot = system.getRepositoryRoot();
    gDefaultRoleDn = prepareDefaultRoleDN();
    gDeprecatedRoles[gDeprecatedRoles.length]= gDefaultRoleDn;
    gSysAdminRole = "cn=systemAdmin,cn=organizational roles,o=system,"+gLDAPRoot;
    gsetupUserRole = "cn=setupUser,cn=organizational roles,o=system,"+gLDAPRoot;
    
    application.importType("wcp.library.util.BaseArtifact");
    application.inherit(LeftcontainerModelArtifact, BaseArtifact);
    application.inherit(RightcontainerModelArtifact, BaseArtifact);
    artifactviewerRight.addListener("onschemaready", setRightSchema);    
    artifactviewerLeft.addListener("onschemaready", setLeftSchema);    
    cordys.addDOMListener(artifactviewerLeft,"ondrop",assignRightSelectedArtifacts);	
    htmlutilId = document.createElement("div");
    htmlutilId.id = "htmlutilId";
    htmlutilId.style.display = "none";
    application.appendToBody( htmlutilId );
    application.addType(htmlutilId, "wcp.library.util.HTMLUtil");
}

var avLeftEventObject = null;

function onAVLeftOnClick(eventObject)
{
    avLeftEventObject = eventObject || window.event;
}

function Form_InitDone(eventObject)
{
	gMsgBundle = getMessageBundle();
    gWorkspaceId = getWorkspaceID();
    gRightArtifactFactoryObj = artifactviewerRight.getArtifactFactoryType("RightContainerType");
    gLeftArtifactFactoryObj = artifactviewerLeft.getArtifactFactoryType("LeftContainerType");
    if(gSearchString == null)
        gSearchString = getloginUserDescription();
    getRolesForUserOrRole();
    emptyLable.hide();
    selectview.setValue("UR"); 
	cordys.addDOMListener(searchInput, "onkeypress", onEnterPress);
}

function LeftContainerType()
{
}

LeftContainerType.prototype.addArtifactBehavior = function( applicationDefinition )
{
  return new LeftcontainerModelArtifact( applicationDefinition );
}

function LeftcontainerModelArtifact( applicationDefinition )
{
    this.menuType = "contextMenu";
    this.BaseArtifact( applicationDefinition );
}

function RightContainerType()
{
}

RightContainerType.prototype.addArtifactBehavior = function( applicationDefinition )
{
    return new RightcontainerModelArtifact( applicationDefinition );
}

function RightcontainerModelArtifact( applicationDefinition )
{
    this.menuType = "contextMenu";
    this.BaseArtifact( applicationDefinition );
}

function selectview_Change(eventObject)
{
    var value = eventObject.srcElement.getValue();  
    if(value == "")
       return;  
    gSelectViewValue = value;
    var userMenuImage = usermenu.getElementsByTagName("IMG")[0];
    var orgImage = defaultContext.getElementsByTagName("IMG")[0];
    usermenu.title = userMenuImage.alt = userMenuImage.title = localization_get("Manage Menus and Toolbars");
    defaultContext.title = orgImage.alt = orgImage.title = localization_get("Manage Default Organizations");
    newID.show();
    //gButtonElmt .focus();
    gLeftSelectedArtifacts = [];
    gRightSelectedArtifacts = [];
    gLeftRightRelations = [];
    gLeftInternalRolesIdArray = new Array();
    gRightInternalRolesIdArray = new Array();
    gLeftInternalRolesArray = new Array();
    gRightInternalRolesArray = new Array();
	gLeftInternalRolesDocument = null;
    gRightInternalRolesDocument = null;
	
    var newIDImage = newID.getElementsByTagName("IMG")[0];
    var batchImage = batchuser.getElementsByTagName("IMG")[0];
    if (value == "UR")
    {
        defaultContext.show();
        newID.title = newIDImage.alt = newIDImage.title = localization_get("Add a User");
        batchuser.title = batchImage.alt = batchImage.title =  localization_get("Add Multiple Users");
        batchuser.show();
        usermenu.show();
        roleTypeCheck.show();
        gRequestCount = 0;
        gFilterFlag  = 0;
        AuthUsersModel.reset();
        showContent(gSearchString ,SearchLDAPModel);   
        groupboxRight.setLabel(localization_get("Roles"));
        gRequestCount = 1;
        gFilterFlag  = 1;
        SearchLDAPModel.reset();
        SearchLDAPModel.reset();

        setStatusInfo(localization_get("Add,edit or remove Users. Assign the roles to the users."));  
        artifactviewerLeft.setMultipleSelect(true);
        artifactviewerRight.arrangeBy("Name","ascending");
    }
    else if (value == "RR")
    {
        defaultContext.hide();
        newID.title = newIDImage.alt = newIDImage.title = localization_get("Add a Role");
        batchuser.title = batchImage.alt = batchImage.title = "";
        batchuser.hide();
        usermenu.hide();
        roleTypeCheck.show();
        gRequestCount = 1;
        gFilterFlag  = 0;
        showContent(gSearchString ,SearchLDAPModel);    
        groupboxRight.setLabel(localization_get("Roles"));
        gRequestCount = 1;
        gFilterFlag  = 1;
        SearchLDAPModel.reset();
        SearchLDAPModel.reset();
        setStatusInfo(localization_get("Add,edit or remove Roles. Assign the roles to the roles."));
        artifactviewerLeft.setMultipleSelect(true);
        artifactviewerRight.arrangeBy("Name","ascending");
    }
    else if(value == "RU")
    {
        defaultContext.hide();
        newID.title = newIDImage.alt = newIDImage.title = localization_get("Add a Role");
        batchuser.title = batchImage.alt = batchImage.title = "";
        batchuser.hide();
        usermenu.hide();
        roleTypeCheck.show();
        gRequestCount = 1;
        gFilterFlag  = 0;
        showContent(gSearchString ,SearchLDAPModel); 
        gFilterString= "";
        AuthUsersModel.reset();
        groupboxRight.setLabel(localization_get("Users"));
        gRequestCount = 0;
        gFilterFlag  = 1;
        SearchLDAPModel.reset();
        setStatusInfo(localization_get("Add,edit or remove Roles. Assign the users to the roles."));   
        artifactviewerLeft.setMultipleSelect(true);
    }
    else if(value == "RT")
    {
        defaultContext.hide();
        newID.title = newIDImage.alt = newIDImage.title = localization_get("Add a Role");
        batchuser.title = batchImage.alt = batchImage.title = "";
        batchuser.hide();
        usermenu.hide();
        roleTypeCheck.show();
        gRequestCount = 1;
        showContent(gSearchString ,SearchLDAPModel);      

        groupboxRight.setLabel(localization_get("Tasks"));
        gTaskFlag = 0;
        TaskModel.reset();
        updateModelData(TaskModel.getData(),false);        
        RightcontainerModel.putData(TaskModel.getData(),true,".//tns:GetTaskCollectionResponse/*",true);
        setStatusInfo(localization_get("Add,edit or remove Roles. Assign the tasks to the roles."));  
        artifactviewerLeft.setMultipleSelect(false);
    }
    else if(value == "UT")
    {
        defaultContext.show();
        newID.title = newIDImage.alt = newIDImage.title = localization_get("Add a User");
        batchuser.title = batchImage.alt = batchImage.title = localization_get("Add Multiple Users");
        batchuser.show();
        usermenu.show();
        roleTypeCheck.hide();
        gRequestCount = 0;
        gFilterFlag  = 0;
        AuthUsersModel.reset();
        showContent(gSearchString ,SearchLDAPModel);   
        groupboxRight.setLabel(localization_get("Tasks"));
        gTaskFlag = 0;
        TaskModel.reset();
        updateModelData(TaskModel.getData(),false);
        RightcontainerModel.putData(TaskModel.getData(),true,".//tns:GetTaskCollectionResponse/*",true);
        setStatusInfo(localization_get("Add,edit or remove Users. Assign the tasks to the users."));  
        artifactviewerLeft.setMultipleSelect(false);
    }
    else if(value == "OUU")
    {
      defaultContext.hide();
        newID.hide();
        batchuser.hide();
        usermenu.hide();
        roleTypeCheck.hide();
		initializeroot();
  showContent(gSearchString ,GetUnitsForAssignmentsModel);
        groupboxRight.setLabel(localization_get("Users"));     
		gFilterString= "";
        AuthUsersModel.reset(); 
        gRequestCount = 0;
        gFilterFlag  = 1;
        SearchLDAPModel.reset();
        setStatusInfo(localization_get(" Assign the users to the teams")); 
        artifactviewerLeft.setMultipleSelect(false);
   }    
   else if(value == "UOU")
   {
       defaultContext.show();
        newID.title = newIDImage.alt = newIDImage.title =localization_get( "Add a User");
        batchuser.title = batchImage.alt = batchImage.title = localization_get("Add Multiple Users");
        batchuser.show();
        usermenu.show();
        roleTypeCheck.hide();
		initializeroot();
        gRequestCount = 0;
        gFilterFlag  = 0;
        AuthUsersModel.reset();
        showContent(gSearchString ,SearchLDAPModel);   
        groupboxRight.setLabel(localization_get("Teams"));
        gTaskFlag = 0;
        gFilterString = "";
		GetUnitsForAssignmentsModel.reset();  
        updateModelData(GetUnitsForAssignmentsModel.getData(),false);  
        RightcontainerModel.putData(GetUnitsForAssignmentsModel.getData(),true,".//dataset/*",true); 
        showDeletedAndISVteams();
    
        setStatusInfo(localization_get("Add,edit or remove Users. Assign the teams to the users."));   
        artifactviewerLeft.setMultipleSelect(false);  
   }
}

function setParamsForRequest(request, dnValue, scope, objClass)
{
    var searchLDAPNode = cordys.selectXMLNode(request,".//um:SearchLDAP");
    if(searchLDAPNode == null) searchLDAPNode = request;
    cordys.setNodeText(searchLDAPNode,"um:dn",dnValue);
    cordys.setNodeText(searchLDAPNode,"um:scope", scope);
    cordys.setNodeText(searchLDAPNode,"um:filter", objClass);
    cordys.setNodeText(searchLDAPNode,"um:sort", "ascending");
    cordys.setNodeText(searchLDAPNode,"um:returnValues", "false");
}
LeftcontainerModelArtifact.prototype.onSelectChange= function(eventObject)
{
    var viewCondition = (gSelectViewValue == "RT" || gSelectViewValue == "UT" || gSelectViewValue == "OUU" || gSelectViewValue == "UOU");
    //For Shift or Ctrl+A selection 
    var selectAllCondition = (avLeftEventObject  && ((avLeftEventObject.ctrlKey && avLeftEventObject.keyCode == 65) || avLeftEventObject.shiftKey))

    if((avLeftEventObject && !avLeftEventObject.ctrlKey)|| selectAllCondition || viewCondition)
    {  
         if(!selectAllCondition  || (selectAllCondition && gselectStartFlag == 0) || viewCondition)
         {
             if(selectAllCondition)
                 gselectStartFlag = 1;

             for(var i=0;i<gLeftSelectedArtifacts.length;i++)
                 gLeftSelectedArtifacts[i].setInfo("","um:additionalinfo/um:count");
             var rightArtifacts = artifactviewerRight.getArtifacts(false);
             var rightArtifactObject = null;
             for(var i=0, length = rightArtifacts.length;i<length ;i++)
             {
                 rightArtifactObject  = artifactviewerRight._getArtifactObject( rightArtifacts[i] );
                 rightArtifactObject.setInfo("","um:additionalinfo/um:roles");
                 var innerCustomDIV = cordys.getElementById(rightArtifactObject.htmlElement(),"imgDIVId");
                 if(innerCustomDIV != null)
                     innerCustomDIV.style.display = "none";
             }
         }
		 showDeletedAndISVteams();
    }
    if(gSelectViewValue == "RT")
        gLeftRightRelations[this.getID()]= fnGetTasksForRole(this.getID());
    else if(gSelectViewValue == "UT")
        gLeftRightRelations[this.getID()]= fnGetTasksForUser(this.getID());
    else if(gSelectViewValue == "RU")
        gLeftRightRelations[this.getID()]= getUsersForRole(this.getID());
    else if(gSelectViewValue == "OUU")
        gLeftRightRelations[this.getID()]= getUsersForTeam(this.getID());
    else if(gSelectViewValue == "UOU")
        gLeftRightRelations[this.getID()]= getTeamsForUser(this.getID());

    setCount(this);
    gSelectednode = this;
   if(selectAllCondition && !viewCondition)
    {
        if(gTimeOutFalg)
            clearTimeout(gTimeOutFalg);
        gTimeOutFalg = setTimeout("showCommonObjects()",0);
    }
    else
    {
        gLeftSelectedArtifacts = artifactviewerLeft.getSelectedArtifacts();
        showObjects(this, rightArtifacts);
     }
   //make sure that sets to null
   avLeftEventObject = null;
}
function showCommonObjects()
{
    gselectStartFlag = 0;
    gLeftSelectedArtifacts = artifactviewerLeft.getSelectedArtifacts();
    showObjects(gSelectednode);
}

LeftcontainerModelArtifact.prototype.onDblClick = function( eventObject )
{
    gSelectednode = this;
    gBoolIsvpOrOrgRole = isContainISVPOrOrgRole(artifactviewerLeft);
    if(gBoolIsvpOrOrgRole)
        title = localization_get("Unable to modify ISVP roles");
    else
        title = "";
    if(!gBoolIsvpOrOrgRole )
        this.editUserInfo();
    else
        application.notify(title);
}
LeftcontainerModelArtifact.prototype.onExtendMenu = function( menu )
{
    gSelectednode = this;
    selectedObjectsLenFlag = (artifactviewerLeft.getSelectedArtifacts().length <= 1);
    var title = "";
    var currentOrgInfoNode = cordys.selectXMLNode(system.getUser().data,".//ldap:organization[ldap:dn = '"+gCurrentOrganization+"']");
    var loginUserDn = XMLHelper.getNodeText(currentOrgInfoNode,"ldap:organizationaluser/ldap:dn","");

    gBoolIsvpOrOrgRole = isContainISVPOrOrgRole(artifactviewerLeft);
    if(gBoolIsvpOrOrgRole)
        title =  localization_get("Unable to modify ISVP roles");
    else
        title = "";

    var menuItemObject = new Object();
    if(gSelectViewValue != "OUU")
    {
        menuItemObject["id"] = "artifact_acl";
        menuItemObject["handler"] = "this.artifactObject.createACL()";
        menuItemObject["content"] = "Security";
        menuItemObject["enable"] = selectedObjectsLenFlag;
        menuItemObject["update"] = true;
        menuItemObject["disableClick"] = false;
        menuItemObject["image"] = "/cordys/wcp/theme/default/icon/authorization/lock.png";
        this.addMenuItem(menu, menuItemObject);
    
    menuItemObject["id"] = "artifact_edit";
    menuItemObject["handler"] = "this.artifactObject.editUserInfo()"; 
    menuItemObject["content"] = "<span><label translatable=\"true\" title='"+title+"'>Edit</label></span>";
    menuItemObject["enable"] = (!gBoolIsvpOrOrgRole && selectedObjectsLenFlag);
    menuItemObject["update"] = true;
    menuItemObject["disableClick"] = false;
    menuItemObject["image"] = "/cordys/wcp/theme/default/icon/action/edit.png";
    this.addMenuItem(menu, menuItemObject);

    var loginuserFlag = isContainLoginUser(artifactviewerLeft,loginUserDn);
    if(loginuserFlag)
        title =  localization_get("Cannot delete the current user");

    menuItemObject["id"] = "artifact_delete";
    menuItemObject["handler"] = "this.artifactObject.deleteUser()";
    menuItemObject["content"] = "<span><label translatable=\"true\" title='"+title+"'>Delete</label></span>";
    menuItemObject["enable"] = (!gBoolIsvpOrOrgRole && !loginuserFlag);
    menuItemObject["update"] = true;
    menuItemObject["disableClick"] = false;
    menuItemObject["image"] = "/cordys/wcp/theme/default/icon/action/delete.png";
    this.addMenuItem(menu , menuItemObject);
}
    if (gSelectViewValue == "UR"  || gSelectViewValue == "UT" || gSelectViewValue == "UOU")
    {
        menuItemObject["id"] = "artifact_clone";
        menuItemObject["handler"] = "this.artifactObject.cloneUser()";
        menuItemObject["content"] = "Clone User";
        menuItemObject["enable"] = selectedObjectsLenFlag;
        menuItemObject["update"] = true;
        menuItemObject["disableClick"] = false;
        menuItemObject["image"] = "/cordys/wcp/theme/default/icon/action/clone.png";
        this.addMenuItem(menu, menuItemObject);
        
        menuItemObject["id"] = "artifact_profile";
        menuItemObject["handler"] = "this.artifactObject.viewUserProfile()";
        menuItemObject["content"] = "User Profile";
        menuItemObject["enable"] = selectedObjectsLenFlag;
        menuItemObject["update"] = true;
        menuItemObject["disableClick"] = false;
        menuItemObject["image"] = "/cordys/wcp/theme/default/icon/authorization/user.png"
        this.addMenuItem(menu, menuItemObject);        

        if(loginuserFlag)
            title =  localization_get("Cannot disable the current user");
        else
            title = "";

        enableordisable(artifactviewerLeft);//sets the gCommon variable depending on whether all the selected users have the same status
        var status=cordys.getNodeText(this.getApplicationDefinition(),".//um:status","enabled");
        if( gCommon && status =="enabled")//if the user or users(s)is enabled then this menu item is appeared
        {
            menuItemObject["id"] = "artifact_disable";
            menuItemObject["handler"] = "this.artifactObject.enabledisableusers(0)";
            menuItemObject["content"] = "<span><label translatable=\"true\" title='"+title+"'>Disable User</label></span>";
            menuItemObject["enable"] = !loginuserFlag;
            menuItemObject["update"] = true;
            menuItemObject["disableClick"] = false;
            menuItemObject["image"] = "/cordys/wcp/theme/default/icon/authorization/user.png"
            this.addMenuItem(menu, menuItemObject);
        }
        if(gCommon && status =="disabled") //if the user or users(s)is disabled then this menu item is appeared
        {
            menuItemObject["id"] = "artifact_enable";
            menuItemObject["handler"] = "this.artifactObject.enabledisableusers(1)";
            menuItemObject["content"] = "Enable User";
            menuItemObject["enable"] = true;
            menuItemObject["update"] = true;
            menuItemObject["disableClick"] = false;
            menuItemObject["image"] = "/cordys/wcp/theme/default/icon/authorization/user.png"
            this.addMenuItem(menu, menuItemObject);
        }        
    } 
	if(gSelectViewValue == "OUU")
    {
        gBoolIsvpOrOrgTeam = isContainISVPOrOrgTeam(artifactviewerLeft);
        menuItemObject["id"] = "artifact_deleteteam";
        menuItemObject["handler"] = "this.artifactObject.deleteTeam()";
        menuItemObject["content"] = "<label translatable=\"true\" title='"+title+"'>Delete Team</label>";
        menuItemObject["enable"] = gBoolIsvpOrOrgTeam;
        menuItemObject["update"] = true;
        menuItemObject["disableClick"] = false;
        menuItemObject["image"] = "/cordys/wcp/theme/default/icon/action/delete.png";
        this.addMenuItem(menu , menuItemObject);
    }
    this.inherited(LeftcontainerModelArtifact,"onExtendMenu",menu);
}
/*purpose: to disable users without deleting them
functionality: prepares a update request so that the attribute "enble" of the organization user is changed to "flase"
*/
LeftcontainerModelArtifact.prototype.enabledisableusers = function(action)
{
    var updateRequest=cordys.cloneXMLDocument(updateLDAPInfo.XMLDocument);
    cordys.setXMLNamespaces(updateRequest,{"um":LDAP_NAMESPACE});
    var UpdateReqNode=cordys.selectXMLNode(updateRequest,".//um:Update");
    var leftselected=artifactviewerLeft.getSelectedArtifacts();
    for(var i=0,length=leftselected.length;i<length;i++)
    {
        var tupleNode= XMLHelper.createElementWithParentNS(UpdateReqNode, "tuple");	
        var oldNode = XMLHelper.createElementWithParentNS(tupleNode, "old");
        var enableNode=XMLHelper.createElementWithNS("enable",LDAP_NAMESPACE);        
        var stringNode=XMLHelper.createElementWithParentNS(enableNode, "string");
        var entrynode=artifactviewerLeft.getSelectedArtifacts()[i].getApplicationDefinition().cloneNode(true);
        entrynode.removeChild(cordys.selectXMLNode(entrynode,".//um:additionalinfo"));
        var oldEntrynode=entrynode.cloneNode(true);
        cordys.appendXMLNode(oldEntrynode,oldNode);
        
        var newEntrynode=entrynode.cloneNode(true);
        var tempenable=enableNode.cloneNode(true);
       
        if(!cordys.selectXMLNode(newEntrynode,"um:enable"))
        {
            cordys.appendXMLNode(tempenable,newEntrynode);
        }
        if(!action)
        {
            cordys.setNodeText(newEntrynode,"um:enable/um:string","false");
        }
        else if(action)
        {
            cordys.setNodeText(newEntrynode,"um:enable/um:string","true");
        }
        var newNode = XMLHelper.createElementWithParentNS(tupleNode, "new");
        cordys.appendXMLNode(newEntrynode,newNode);
 
        if(!action)
            cordys.setNodeText(artifactviewerLeft.getSelectedArtifacts()[i].getApplicationDefinition(),".//um:status","disabled");
        else
            cordys.setNodeText(artifactviewerLeft.getSelectedArtifacts()[i].getApplicationDefinition(),".//um:status","enabled");
       
        //new code to update model

        var dnval=leftselected[i].getID();
        var newOrOldNode = cordys.selectXMLNode(LeftcontainerModel.getData(),".//um:new[um:entry[@dn='"+dnval+"']]/um:entry | .//um:old[um:entry[@dn='"+dnval+"']]/um:entry");
        if(newOrOldNode && !(cordys.selectXMLNode(newOrOldNode,".//um:enable")))
            cordys.appendXMLNode(tempenable.cloneNode(true),newOrOldNode);
        var node1=cordys.selectXMLNode(newOrOldNode,".//um:enable/um:string");
        var node2=cordys.selectXMLNode(newOrOldNode,".//um:status");
        if(!action && newOrOldNode)
        {
            cordys.setTextContent(node1,"false");
            cordys.setTextContent(node2,"disabled");
        }
        else if(action && newOrOldNode)
        {
            cordys.setTextContent(node1,"true");
            cordys.setTextContent(node2,"enabled");
        }
    }    
    DummyModel.setMethodRequest(updateRequest);
    DummyModel.reset();

    if(!action)
    {
        setStatusInfo(localization_get("Disabled selected User(s) successfully"));
    }
    else
    {
       setStatusInfo(localization_get("Enabled selected User(s) successfully"));
    }
    for(var q=0,length=leftselected.length;q<length;q++)
    {
        var newnodes=cordys.selectXMLNodes(updateRequest,".//um:new/um:entry");
        gLeftArtifactFactoryObj .rebindArtifact(leftselected[q].getID(),setAdditionalInfo(newnodes[q],true));
        setCount(leftselected[q]);
    }
}
/*purpose: This function sets the value of gCommon variable depending on whether all the selected users have the same status or not.
functionality:If only onse artifact is selected gCommon is true and if multiple artifacts are selected, it is checked whether all have the same status or not.
*/
function enableordisable(artifactviewer)
{
    var leftselected=artifactviewer.getSelectedArtifacts();
    if(leftselected.length == 1)
    {
        gCommon=true;
    }
    else
    {
        for(var k=0,length=leftselected.length;k<length;k++)
        {
            var status1=cordys.getNodeText(leftselected[k].getApplicationDefinition(),".//um:status");
            for(var p=k+1;p<length;p++)
            {
                 var status2= cordys.getNodeText(leftselected[p].getApplicationDefinition(),".//um:status");
                 if(status1 == status2)
                     gCommon=true;
                 else
                 {
                     gCommon=false;
                     return;
                 }
            }
        }
    }
}

LeftcontainerModelArtifact.prototype.viewUserProfile = function()
{
    var userProfile = userprofile.XMLDocument.documentElement.cloneNode(true);
    XMLHelper.setNodeText(userProfile, ".//*[local-name() = 'description']",gSelectednode.getName());
    application.showDialog(userProfile,gSelectednode.getID());
}
LeftcontainerModelArtifact.prototype.cloneUser = function()
{
    var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
	cordys.appendXMLNode(actionnode.XMLDocument.documentElement.cloneNode(true),cordys.selectXMLNode(userdetailsDialog,".//data"));
    var data = new Object();  
    data.roleNode = cordys.selectXMLNode(this.getApplicationDefinition(),".//um:role").cloneNode(true);
    
    var authUserEntryNode = getAuthenticatedUser(this.getApplicationDefinition());
    data.defaultContext = XMLHelper.getNodeText(authUserEntryNode, ".//um:defaultcontext/um:string", gCurrentOrganization);
    data.cloningDN = this.getApplicationDefinition().getAttribute("dn");
    //Checking the type of user
    data.userType = getUserType(authUserEntryNode);
	if(data.userType == "1")
	{
		setApplicationDefinition(userdetailsDialog,"cloneuserId","usermanager/cloneuser.caf",localization_get("Clone User"),"dialogHeight:270px;dialogWidth:500px;");
	}
	else
	{
		setApplicationDefinition(userdetailsDialog,"cloneuserId","usermanager/cloneuser.caf",localization_get("Clone User"),"dialogHeight:190px;dialogWidth:500px;");
	}
    application.showDialog(userdetailsDialog,  data , null, newDialogCloseCallback, false);
}
LeftcontainerModelArtifact.prototype.createACL= function()
{
    var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
    setApplicationDefinition(userdetailsDialog,"acllistId","/cordys/usermanager/manageacls.caf",localization_get("ACL Explorer"),"dialogHeight:80%;dialogWidth:80%;");
    application.showDialog(userdetailsDialog,  this.getApplicationDefinition().getAttribute("dn"));
}
LeftcontainerModelArtifact.prototype.editUserInfo = function()
{
   gSelectednode = this;
    var data = new Object();
    var entryNode = this.getApplicationDefinition();
    var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
    if(gSelectViewValue == "UR" || gSelectViewValue == "UT" || gSelectViewValue == "UOU")
    { 
        cordys.appendXMLNode(getReqNodewithModel("GetLDAPObjectOperationModel", cordys.getNodeText(entryNode,"um:authenticationuser/um:string")),cordys.selectXMLNode(userdetailsDialog,".//data"));
        cordys.appendXMLNode(getReqNodewithModel("OrgUserModel", entryNode.getAttribute("dn") ),cordys.selectXMLNode(userdetailsDialog,".//data"));
        setApplicationDefinition(userdetailsDialog,"userdetailsId","/cordys/usermanager/userdetails.caf",localization_get("User Details"));
        application.showDialog(userdetailsDialog, "update", null, editDialogCloseCallback, false);       
    }
    else if(gSelectViewValue == "RR" || gSelectViewValue == "RU" || gSelectViewValue == "RT")
    {
        cordys.appendXMLNode(getReqNodewithModel("GetLDAPObjectOperationModel", entryNode.getAttribute("dn")),cordys.selectXMLNode(userdetailsDialog,".//data"));
        setApplicationDefinition(userdetailsDialog,"roledetailsId","/cordys/usermanager/roledetails.caf",localization_get("Role Details"));
        application.showDialog(userdetailsDialog, "update", null, editDialogCloseCallback, false);    
    }
}
  
function editDialogCloseCallback(dialogReturnValue)
{
    if(dialogReturnValue != null)
    {
        var authUser = dialogReturnValue.authUser;
        if(authUser)
        {
            XMLHelper.setXMLNamespace(authUser,"um",LDAP_NAMESPACE);
            if(cordys.selectXMLNode(authUser,"um:old"))
            {
                var dnVal = XMLHelper.getAttribute(authUser,"um:old/um:entry","dn");
                var newOrOldNode = cordys.selectXMLNode(AuthUsersModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
                if(newOrOldNode)
                {
                    var authEntryNode = cordys.selectXMLNode(newOrOldNode,"um:entry");
                    newOrOldNode.replaceChild(cordys.selectXMLNode(authUser,"um:new/um:entry").cloneNode(true),authEntryNode);
                }
            }
            else
            {
                 addDataNode(AuthUsersModel,"SearchLDAPResponse",authUser);
            }
        }
        var editObject = dialogReturnValue.objectNode;
        if(editObject)
        {
            XMLHelper.setXMLNamespace(editObject,"um",LDAP_NAMESPACE);
            var newEntryNode = cordys.selectXMLNode(editObject,"um:new/um:entry");
            if(newEntryNode == null)
                newEntryNode = cordys.selectXMLNode(editObject,"um:old/um:entry");
            
            setAdditionalInfo(newEntryNode,true);
            var dnVal = XMLHelper.getAttribute(editObject,"um:old/um:entry","dn");
            var newOrOldNode = cordys.selectXMLNode(LeftcontainerModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
            if(newOrOldNode)
            {
                var entryNode = cordys.selectXMLNode(newOrOldNode,"um:entry");
                newOrOldNode.replaceChild(newEntryNode.cloneNode(true),entryNode);
            }
            if(gSelectViewValue == "RR")
            {
                var dnVal = XMLHelper.getAttribute(editObject,"um:old/um:entry","dn");    
                replaceRoleInRRview(dnVal,newEntryNode);
                RightcontainerModel.refreshAllViews();
            }
            LeftcontainerModel.refreshAllViews();
			
        }
        setStatusInfo(localization_get("edited"));
    }
}

function replaceRoleInRRview(dnVal,newNode)
{
    var newOrOldNode = cordys.selectXMLNode(RightcontainerModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
    if(newOrOldNode)
    {
        var entryNode = cordys.selectXMLNode(newOrOldNode,"um:entry");
        newOrOldNode.replaceChild(newNode.cloneNode(true),entryNode);
    }    
     
    newOrOldNode = cordys.selectXMLNode(LeftRolesModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
    if(newOrOldNode)
    {
        var entryNode = cordys.selectXMLNode(newOrOldNode,"um:entry");
        newOrOldNode.replaceChild(newNode.cloneNode(true),entryNode);
    } 
    newOrOldNode = cordys.selectXMLNode(RightRolesModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
    if(newOrOldNode)
    {
        var entryNode = cordys.selectXMLNode(newOrOldNode,"um:entry");
        newOrOldNode.replaceChild(newNode.cloneNode(true),entryNode);
    } 
}

LeftcontainerModelArtifact.prototype.deleteUser = function()
{
    gSelectednode = this;
    var selectedObjects = artifactviewerLeft.getSelectedArtifacts();
    if(selectedObjects.length > 1)
    {
        if(gSelectViewValue == "UR" || gSelectViewValue == "UT" || gSelectViewValue == "UOU")
            application.confirm(localization_makeCompositeText(localization_get("Are you sure you want to delete the {0} users?"),selectedObjects.length),false,deleteObjectCloseHandler);
        else
            application.confirm(localization_makeCompositeText(localization_get("Are you sure you want to delete the {0} roles?"),selectedObjects.length),false,deleteObjectCloseHandler);
    }
    else
    {
        if(gSelectViewValue == "UR" || gSelectViewValue == "UT" || gSelectViewValue == "UOU")
            application.confirm(localization_makeCompositeText(localization_get("Are you sure you want to delete the user '{0}' ?"),gSelectednode.getName()),false,deleteObjectCloseHandler);
        else
            application.confirm(localization_makeCompositeText(localization_get("Are you sure you want to delete the role '{0}' ?"),gSelectednode.getName()),false,deleteObjectCloseHandler);
    }
}
LeftcontainerModelArtifact.prototype.deleteTeam = function()
{
    application.confirm(localization_makeCompositeText(localization_get("Are you sure you want to delete the team '{0}' ?"),artifactviewerLeft.getSelectedArtifacts()[0].getName()),false,deleteTeamHandler);
}
function deleteTeamHandler(confirmReturnValue)
{
    if(confirmReturnValue == 1)
    {     
        RemoveUnitAndAssignmentsModel.reset();
        if(!gSoapfault)
		{
			gUserOrTeamCount = 0;
            gTeamAssignmentsResponseNode = cordys.selectXMLNodes(gLeftRightRelations[artifactviewerLeft.getSelectedArtifacts()[0].getID()],".//um:tuple");
            gUpdateRequest = cordys.cloneXMLDocument(updateLDAPInfo.XMLDocument);
			cordys.setXMLNamespaces(gUpdateRequest,{"um":LDAP_NAMESPACE});
			updateRolesForUsers();
		}
        var leftselected = artifactviewerLeft.getSelectedArtifacts();
        var newOrOldNode = cordys.selectXMLNode(LeftcontainerModel.getData(),".//um:old/um:Unit[um:ID='"+leftselected [0].getID()+"'] | .//um:new/um:Unit[um:ID='"+leftselected [0].getID()+"'] ");
        if( newOrOldNode )
           newOrOldNode.parentNode.parentNode.removeChild(newOrOldNode.parentNode);  
        LeftcontainerModel.refreshAllViews();
        showDeletedAndISVteams();
  application.notify(localization_get("Before republishing the team you need to clean the build folder in application manager or workspace, else team will not be published again."));
    }
}
function updateRolesForUsers()
{
    if(gUserOrTeamCount <gTeamAssignmentsResponseNode.length)
    {
        var tupleNode = gTeamAssignmentsResponseNode[gUserOrTeamCount];
        var userDN = cordys.getNodeText(tupleNode,".//um:Assignment/um:UserDN");
        var userName = userDN.split(",")[0].split("=")[1];
        var orgName = application.organization.split(",")[0].split("=")[1];
        var roleDN = XMLHelper.getNodeText(tupleNode,".//um:RoleDN","");
        var roleName = "";
        if(roleDN != "")
        {
             roleName = roleDN.split(",")[0].split("=")[1];   
        }        
        if(roleName != "")
        {
           application.confirm(localization_makeCompositeText(localization_get("User '{0}' is already associated with role(s) '{1}'."),userName,roleName)+" \n "+localization_makeCompositeText(localization_get("Do you want to revoke this role from '{0}' in the '{1}' organization?"),userName,orgName),false,confirmCloseCallbackForUserRole);
        }
        else
        {
           gUserOrTeamCount++;
           updateRolesForUsers();
        }   
    }
    else
    {
        if(cordys.selectXMLNode(gUpdateRequest,".//um:tuple"))
        {
            gSoapfault = false;
            UpdateLDAPModel.setMethodRequest(gUpdateRequest);
            UpdateLDAPModel.reset();           
        }	
    }
}
function confirmCloseCallbackForUserRole(confirmReturnValue)
{
	// Need to analyse why namespace prefix is getting removed for gTeamAssignmentsResponseNode.
	XMLHelper.setXMLNamespace(gTeamAssignmentsResponseNode[gUserOrTeamCount],"um",UNIT_NAMESPACE);
	var tupleNode = gTeamAssignmentsResponseNode[gUserOrTeamCount];
    var userDn  = cordys.getNodeText(tupleNode,".//um:Assignment/um:UserDN");

    if(confirmReturnValue == 1)
    {
	    gSelectednode  = userDn;
        GetLDAPObjectOperationModel.reset();
        var entryNode = cordys.selectXMLNode(GetLDAPObjectOperationModel.getData(),".//um:entry");
		if(entryNode)
		{
        	frameUpdateNode(entryNode);
		    var roleDN = XMLHelper.getNodeText(tupleNode,".//um:RoleDN","");
    	    var updateNode  = cordys.selectXMLNode(gUpdateRequest,".//um:Update");
			var newEntryNode = cordys.selectXMLNode(updateNode,".//um:new/um:entry[@dn='"+userDn +"']");

	        var stringNode = cordys.selectXMLNode(newEntryNode,"um:role/um:string[.= '"+roleDN+"']");
    	    if(stringNode != null)
        	    cordys.selectXMLNode(newEntryNode,"um:role").removeChild(stringNode);

			var newOrOldNode = cordys.selectXMLNode(RightcontainerModel.getData(),".//um:new[um:entry[@dn='"+userDn+"']] | .//um:old[um:entry[@dn='"+userDn+"']]");
			var replaceWithNode = null;
			if(newOrOldNode)
			{
				var modelEntryNode = cordys.selectXMLNode(newOrOldNode,"um:entry");
				replaceWithNode = setAdditionalInfo(newEntryNode.cloneNode(true),false);
				newOrOldNode.replaceChild(replaceWithNode,modelEntryNode);				
			}				
			gRightArtifactFactoryObj.rebindArtifact(userDn,replaceWithNode.cloneNode(true));
		}
    }
	else
	{
    	var userArtifact = [];
		userArtifact[0] = gRightArtifactFactoryObj.getArtifact(userDn);
    	setStyleAfteroperation("removed",userArtifact);
	}
    gUserOrTeamCount++;
    updateRolesForUsers();
}
function deleteObjectCloseHandler(confirmReturnValue)
{
    if(confirmReturnValue == 1)
    {   
        gSoapfault = false;
        var selectedObjects = artifactviewerLeft.getSelectedArtifacts();
        if(selectedObjects.length == 0)
            selectedObjects[0] = gSelectednode;
        if(deleteReferencesForAll(selectedObjects))
        {
            var deleteRecursiveReq = cordys.cloneXMLDocument(deleteRecursiveXML.XMLDocument);
            cordys.setXMLNamespaces(deleteRecursiveReq,{"um":LDAP_NAMESPACE});
            var deleteRecursiveNode = cordys.selectXMLNode(deleteRecursiveReq,".//um:DeleteRecursive");
            var l_tupleNode = cordys.selectXMLNode(deleteRecursiveNode,"um:tuple");
            var tupleNode = l_tupleNode.cloneNode(true);
            var entryNode = selectedObjects[0].getApplicationDefinition();
            cordys.appendXMLNode(removeAdditionalInfo(entryNode),cordys.selectXMLNode(l_tupleNode,"um:old"));

            for(i=1;i<selectedObjects.length;i++)
            {
                l_tupleNode = tupleNode.cloneNode(true);                
                cordys.appendXMLNode(removeAdditionalInfo(selectedObjects[i].getApplicationDefinition()),cordys.selectXMLNode(l_tupleNode,"um:old"));
                cordys.appendXMLNode(l_tupleNode,deleteRecursiveNode); 
            }
            var tAuthUsers;
            if(getType(gSelectednode.getApplicationDefinition()) == "organizational users")
                tAuthUsers = decideAuthUsersToDelete();

             DummyModel.setMethodRequest(deleteRecursiveReq );
             DummyModel.reset();
             if(!gSoapfault && getType(gSelectednode.getApplicationDefinition()) == "organizational users")
                 deleteAuthUsers(tAuthUsers);
        }
        if(gSoapfault == false)
        { 
             for(i=0;i<selectedObjects.length;i++)
             {
                 var dnVal = selectedObjects[i].getID();
                 var newOrOldNode = cordys.selectXMLNode(LeftcontainerModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
                 if(newOrOldNode)              
                     newOrOldNode.parentNode.parentNode.removeChild(newOrOldNode.parentNode);
                 if(gSelectViewValue == "RR")
                     deleteRoleFromRRview(dnVal );
             }
             if(gSelectViewValue == "RR")
                 RightcontainerModel.refreshAllViews();  
             LeftcontainerModel.refreshAllViews();
			 
             setStatusInfo(localization_get("deleted"));
        }
    }
}
function deleteAuthUsers(authUsers)
{
    var deleteRecursiveReq = cordys.cloneXMLDocument(deleteRecursiveXML.XMLDocument); 
    cordys.setXMLNamespaces(deleteRecursiveReq,{"um":LDAP_NAMESPACE});
    var deleteRecursiveNode = cordys.selectXMLNode(deleteRecursiveReq,".//um:DeleteRecursive");
    XMLHelper.createElementWithParentNS(deleteRecursiveNode , "deletereference","false");
    deleteRecursiveNode.removeChild(cordys.selectXMLNode(deleteRecursiveNode,"um:tuple"));
    for(i=0;i<authUsers.length;i++)
    {
        gSelectednode = authUsers[i];
        GetLDAPObjectOperationModel.reset();  
        cordys.appendXMLNode(cordys.selectXMLNode(GetLDAPObjectOperationModel.getData(),".//um:tuple"),deleteRecursiveNode);
    }
    if(authUsers.length != 0)
    {
      DeleteAuthUsersModel.setMethodRequest(deleteRecursiveReq);
      DeleteAuthUsersModel.reset();
    }
}
function deleteRoleFromRRview(dnVal)
{
     var newOrOldNode = cordys.selectXMLNode(RightcontainerModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
     newOrOldNode.parentNode.parentNode.removeChild(newOrOldNode.parentNode);  
      
     newOrOldNode = cordys.selectXMLNode(LeftRolesModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
     newOrOldNode.parentNode.parentNode.removeChild(newOrOldNode.parentNode);
      
     newOrOldNode = cordys.selectXMLNode(RightRolesModel.getData(),".//um:new[um:entry[@dn='"+dnVal+"']] | .//um:old[um:entry[@dn='"+dnVal+"']]");
     newOrOldNode.parentNode.parentNode.removeChild(newOrOldNode.parentNode);
}
function deleteReferencesForAll(objectsArray)
{
    for(i=0;i<objectsArray.length;i++)
      deleteReferenceObjects(objectsArray[i].getID());
      
    return !gSoapfault;  
}

function decideAuthUsersToDelete()
{
    var tAuthUsers = [];
    var selectedObjects = artifactviewerLeft.getSelectedArtifacts();
        if(selectedObjects.length == 0)
            selectedObjects[0] = gSelectednode;

    var tSelectedElements = selectedObjects.slice(0);
    for(var i=0;i<tSelectedElements.length;i++)
    {
        var flag = 1;
        gSelectednode = tSelectedElements[i];
        gSoapfault = false;
        gAccessDeniedFlag = false;
        GetUserDetailsOperationModel.reset();
        if(gSoapfault)  // will check is there any soap fault for getUserdetails and will proceed accordingly
        {
            if(gAccessDeniedFlag) continue;
            else break;
        }
        var organizationNodes = cordys.selectXMLNodes(GetUserDetailsOperationModel.getData(),".//um:organization");
        for(var k=0;k<organizationNodes.length;k++)
        {
            for(var j= i+1;j<tSelectedElements.length;j++)
            {
                if(cordys.getNodeText(organizationNodes[k],"um:organizationaluser/um:dn") == tSelectedElements[j].getID())
                {
                   tSelectedElements.splice(j,1);
                   flag++;
                   break;
                }    
            }
        }
        if(flag == organizationNodes.length)
            tAuthUsers[tAuthUsers.length] = tSelectedElements[i];
    }
    return tAuthUsers;
}

function getReqNodewithModel(modelname, dnValue)
{
    var reqNode = requestnode.XMLDocument.documentElement.cloneNode(true);
    reqNode.setAttribute("model", modelname);
    cordys.setNodeText(reqNode,".//*[local-name() = 'dn']", dnValue);
    return reqNode;
}

RightcontainerModelArtifact.prototype.onExtendMenu = function( menu )
{
    var title = "";
    var title1 = "";
    var contentAssign = "";
    var contentRemove = "";
    var isContainFlag = false;
 gLeftSelectedArtifacts = artifactviewerLeft.getSelectedArtifacts();
    gRightSelectedArtifacts = artifactviewerRight.getSelectedArtifacts();
    if (gSelectViewValue == "UR" ||gSelectViewValue == "UT"  || gSelectViewValue == "UOU")
    {
        gSelectednode = this;
        contentAssign = "Assign to selected User(s)";
        contentRemove = "Remove from selected User(s)";
        if(gSelectViewValue == "UOU" && artifactviewerLeft.getSelectedArtifacts()[0])
   {
   var deleteNodes = artifactviewerRight.getSelectedArtifacts();
   var flag = 0;
   for(var i =0;i<deleteNodes.length;i++)
   {
    if(cordys.getNodeText(deleteNodes[i].getApplicationDefinition(),"um:Deleted") == "true")
    {
     flag =1;
     break;
    }
   }
   if(flag )
   {
    title =  localization_get("Unable to assign non-existent team to the user");
    title1 =  localization_get("Unable to configure non-existent team to the user");
   }
   else
   {
    title = "";
    title1 = ""; 
   }
  }
        if(gSelectViewValue == "UT")
        {
            isContainFlag = isContainRolebasedTask();
            if(isContainFlag)
            {
                title =  localization_get("Unable to modify role based tasks");
                title1 =  localization_get("Unable to modify role based tasks");
            }
        }
    }
    else if (gSelectViewValue == "OUU" )
    {
        contentAssign = "Assign to selected Team";
        contentRemove = "Remove from selected Team";
        if(artifactviewerLeft.getSelectedArtifacts()[0])
        {
            var deletedNode = cordys.selectXMLNode(artifactviewerLeft.getSelectedArtifacts()[0].getApplicationDefinition(),".//um:Deleted");
            if(deletedNode && (cordys.getTextContent(deletedNode) == "true"))
            {
                title =  localization_get("Unable to assign the user to non-existent team");
                title1 =  localization_get("Unable to configure the user to non-existent team");
            }
            else
            {
                title = "";
                title1 = "";
            }
        }
    }      
    else
    {
        gSelectednode = gLeftSelectedArtifacts.length>0 ? gLeftSelectedArtifacts[0] : null;
        contentAssign = "Assign to selected Role(s)";
        contentRemove = "Remove from selected Role(s)";
        if((gSelectViewValue == "RT" || gSelectViewValue == "RR"))
        {
            isContainFlag  = isContainISVPOrOrgRole(artifactviewerLeft);
            if(isContainFlag)
            {
                title =  localization_get("Unable to modify ISVP roles");   
                title1 =  localization_get("Unable to modify ISVP roles");
            }
        }
    }
    gSelectednode = this;
    var menuItemObject = new Object();
    menuItemObject["id"] = "artifact_assign";
    menuItemObject["handler"] = manipulateObjectsOnMenu("assigned");
    menuItemObject["content"] = "<span><label translatable=\"true\" title ='"+title+"'>"+contentAssign+"</label></span>";
    menuItemObject["enable"] = enableApplicableItems("assign",isContainFlag);
    menuItemObject["update"] = true;
    menuItemObject["disableClick"] = false;
    menuItemObject["image"] = "/cordys/wcp/theme/default/icon/businessobject/assignment.png";
    this.addMenuItem(menu, menuItemObject);

    menuItemObject["id"] = "artifact_remove";
    menuItemObject["handler"] = manipulateObjectsOnMenu("removed");    
    menuItemObject["content"] = "<span><label translatable=\"true\" title ='"+title+"'>"+contentRemove+"</label></span>";
    menuItemObject["enable"] = enableApplicableItems("remove",isContainFlag);
    menuItemObject["update"] = true; 
    menuItemObject["disableClick"] = false;
    menuItemObject["image"] = "/cordys/wcp/theme/default/icon/action/delete.png";
    this.addMenuItem(menu , menuItemObject);

    if(gSelectViewValue == "RT" || gSelectViewValue == "UT" || gSelectViewValue == "OUU"  || gSelectViewValue == "UOU" ) 
    {
        menuItemObject["id"] = "artifact_configure";
        menuItemObject["handler"] = manipulateObjectsOnMenu("configured");    
        menuItemObject["content"] = "<span><label translatable=\"true\" title='"+title1+"' >Configure</label></span>";
        menuItemObject["enable"] = enableApplicableItems("configure",isContainFlag);
        menuItemObject["update"] = true; 
        menuItemObject["disableClick"] = false;
        menuItemObject["image"] = "/cordys/wcp/theme/default/icon/action/preference.png";
        this.addMenuItem(menu , menuItemObject);
   }
   this.inherited(RightcontainerModelArtifact,"onExtendMenu",menu);
}

RightcontainerModelArtifact.prototype.onClick= function(eventObject)
{
     if(gSelectViewValue == "RT" || gSelectViewValue == "UT")
        setStatusInfo(this.getName());
     else if(gSelectViewValue == "UOU")
        statusbarId.setStatus(cordys.getNodeText(this.getApplicationDefinition(),"um:QName"));
     else
        setStatusInfo(this.getID());
}
RightcontainerModelArtifact.prototype.onDragStart = function(eventObject)
{
    gSelectednode = this;
    if(artifactviewerLeft.getSelectedArtifacts().length == 0)
    {
        eventObject.event.dataTransfer.effectAllowed = "none";
        setStatusInfo(localization_get("select"));
    }
    else
    {
        var isContainFlag = false;
        if(gSelectViewValue == "RT" || gSelectViewValue == "RR")
            isContainFlag = isContainISVPOrOrgRole(artifactviewerLeft);
        else if(gSelectViewValue == "UT")
            isContainFlag  = isContainRolebasedTask();
		var returnArray = isAllowed("assign",isContainFlag);
		if(!returnArray[0])
		{
        	eventObject.event.dataTransfer.effectAllowed = "none";
         	application.notify(returnArray[1]);
		}

		if(gSelectViewValue == "OUU" && cordys.getNodeText(artifactviewerLeft.getSelectedArtifacts()[0].getApplicationDefinition(),".//um:Deleted")  == "true")
		{
			eventObject.event.dataTransfer.effectAllowed = "none";
            application.notify(localization_get("Unable to assign the user to non-existent team"));
		}
		if(gSelectViewValue == "UOU" && cordys.getNodeText(artifactviewerRight.getSelectedArtifacts()[0].getApplicationDefinition(),".//um:Deleted") == "true")
		{
        	eventObject.event.dataTransfer.effectAllowed = "none";
        	application.notify(localization_get("Unable to assign non-existent team to the user"));
	    }
 }
    // drag event is not getting fired when data is not set in the data transfer object
    cordys.dataTransferSetData(eventObject, "Text", "");
}
LeftcontainerModelArtifact.prototype.onDragStart = function(eventObject)
{
    eventObject.event.dataTransfer.effectAllowed = "none";
}
function assignRightSelectedArtifacts(eventObject)
{     
	cordys.stopPropagation(eventObject);
    var isContainFlag = false;
    if(gSelectViewValue == "RT" || gSelectViewValue == "RR")
        isContainFlag = isContainISVPOrOrgRole(artifactviewerLeft);
    else if(gSelectViewValue == "UT")
        isContainFlag  = isContainRolebasedTask();

    if(enableApplicableItems("assign",isContainFlag))
    {
        gRightSelectedArtifacts = artifactviewerRight.getSelectedArtifacts();
        manipulateObjectsforUsersOrRoles("assigned",this);
    } 
}

function GetUserDetailsOperationModel_OnRequest(eventObject)
{
    gSoapfault = false;
    cordys.setNodeText(eventObject.request,".//um:dn", gSelectednode.getID());
}

function GetLDAPObjectOperationModel_OnRequest(eventObject)
{
    gSoapfault = false;
    if(gSelectednode == null)
    {
        var currentOrgInfoNode = cordys.selectXMLNode(system.getUser().data,".//ldap:organization[ldap:dn = '"+gCurrentOrganization+"']");
		var loginUserDn = XMLHelper.getNodeText(currentOrgInfoNode,"ldap:organizationaluser/ldap:dn","");
        cordys.setNodeText(eventObject.request,".//um:dn",loginUserDn);
    }
     else if(gSelectViewValue != "OUU")
        cordys.setNodeText(eventObject.request,".//um:dn",cordys.getNodeText(gSelectednode.getApplicationDefinition(),"um:authenticationuser/um:string"));
	else
		cordys.setNodeText(eventObject.request,".//um:dn",gSelectednode);
}

function model_OnSOAPFault()
{
    gSoapfault = true;
}

function newID_Click(eventObject)
{
    var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
    cordys.appendXMLNode(actionnode.XMLDocument.documentElement.cloneNode(true),cordys.selectXMLNode(userdetailsDialog,".//data"));
    cordys.appendXMLNode(getReqNodewithModel("GetAllOrganizationsoperationModel", gLDAPRoot),cordys.selectXMLNode(userdetailsDialog,".//data"));
    if(gSelectViewValue == "UR" || gSelectViewValue == "UT" || gSelectViewValue == "UOU")
        setApplicationDefinition(userdetailsDialog,"newuserId","/cordys/usermanager/userdetails.caf",localization_get("Create User"));
    else
        setApplicationDefinition(userdetailsDialog,"newroleId","/cordys/usermanager/roledetails.caf",localization_get("Create Role"));

    application.showDialog(userdetailsDialog, "insert", null, newDialogCloseCallback, false);
}

function newDialogCloseCallback(dialogReturnValue)
{
    if(dialogReturnValue != null)
    {
        var index = 0;
        if(cordys.selectXMLNodes(LeftcontainerModel.getData(),".//um:tuple").length == 0)
            index = 1;
        var authUsers = dialogReturnValue.authUser;        
        if(authUsers)
        {
            XMLHelper.setXMLNamespace(authUsers,"um",LDAP_NAMESPACE);
            var tupleNodes = cordys.selectXMLNodes(authUsers,".//um:tuple");
            if(tupleNodes.length <= 1)
            {
                var tupleNode = cordys.selectXMLNode(authUsers,".//um:tuple");
                if(!tupleNode)
                  tupleNode = authUsers;
                var dnVal = XMLHelper.getAttribute(tupleNode,".//um:entry","dn");
                var authTupleNode = cordys.selectXMLNode(AuthUsersModel.getData(),".//um:tuple[.//um:entry[@dn='"+dnVal+"']]");
                if(authTupleNode)
                    cordys.selectXMLNode(AuthUsersModel.getData(),".//um:SearchLDAPResponse").replaceChild(tupleNode,authTupleNode);
                else
                    addDataNode(AuthUsersModel,"SearchLDAPResponse",tupleNode,index);          
            }
            else
            {
                for(var i=0;i<tupleNodes.length;i++)
                {
                    var dnVal = XMLHelper.getAttribute(tupleNodes[i],".//um:entry","dn");
                    var authTupleNode = cordys.selectXMLNode(AuthUsersModel.getData(),".//um:tuple[.//um:entry[@dn='"+dnVal+"']]");
                    if(authTupleNode)
                        cordys.selectXMLNode(AuthUsersModel.getData(),".//um:SearchLDAPResponse").replaceChild(tupleNodes[i],authTupleNode);
                    else
                        addDataNode(AuthUsersModel,"SearchLDAPResponse",tupleNodes[i],index);  
                }
            }
        }
        var newObjects = dialogReturnValue.objectNode;        
        if(newObjects)
        {
            XMLHelper.setXMLNamespace(newObjects,"um",LDAP_NAMESPACE);
            var dn = "";
            var tupleNodes = cordys.selectXMLNodes(newObjects,".//um:tuple");
            if(tupleNodes.length <= 1)
            {
                var tupleNode = cordys.selectXMLNode(newObjects,".//um:tuple");
                if(cordys.selectXMLNode(newObjects,".//um:tuple") == null)
                   tupleNode = newObjects.cloneNode(true);
               else
                   tupleNode = cordys.selectXMLNode(newObjects,".//um:tuple").cloneNode(true);
                   dn = XMLHelper.getAttribute(tupleNode,".//um:entry","dn");
                setAdditionalInfo(cordys.selectXMLNode(tupleNode,".//um:entry"),true);
				LeftcontainerModel.clear();
                addDataNode(LeftcontainerModel,"",tupleNode,index);
                if(gSelectViewValue == "RR")
                    addRoleToRRview(tupleNode);
            }
            else
            {
                dn = XMLHelper.getAttribute(tupleNodes[0],".//um:entry","dn");
				LeftcontainerModel.clear();
                for(var i=0;i<tupleNodes.length;i++)
                {
                    setAdditionalInfo(cordys.selectXMLNode(tupleNodes[i],".//um:entry"),true)
                    addDataNode(LeftcontainerModel,"",tupleNodes[i],index); 
                    if(gSelectViewValue == "RR")
                        addRoleToRRview(tupleNodes[i]);
                }
            }
            if(gSelectViewValue == "RR")
                RightcontainerModel.refreshAllViews();
			cordys.appendXMLNamespaces(LeftcontainerModel.getData(),{"um":LDAP_NAMESPACE});
            LeftcontainerModel.refreshAllViews();
			
            artifactviewerLeft.selectArtifactByIndex(gLeftArtifactFactoryObj.getArtifact(dn).getIndex());
            if(tupleNodes.length <= 1)
              { 
                if(gSelectViewValue == "RR" || gSelectViewValue == "RU" || gSelectViewValue == "RT")
                {   
                  setStatusInfo(localization_makeCompositeText(localization_get("Role '{0}' added successfully."),cordys.getNodeText(newObjects,".//um:cn/um:string")));
                }
                else
                {
                  setStatusInfo(localization_makeCompositeText(localization_get("User '{0}' added successfully."),cordys.getNodeText(newObjects,".//um:cn/um:string")));
                } 
              } 
            else
              setStatusInfo(tupleNodes.length+localization_get(" Users added successfully."));
            showEmptyLable();
       }
    }
}

function addRoleToRRview(tupleNode)
{
    tupleNode.removeAttribute("xmlns:SOAP");
    tupleNode.removeAttribute("xmlns:clientattr");
    tupleNode.removeAttribute("clientattr:sync_id");

    if(cordys.selectXMLNodes(RightcontainerModel.getData(),".//um:tuple").length == 0)
        addDataNode(RightcontainerModel,"",tupleNode.cloneNode(true),1);
    else
        addDataNode(RightcontainerModel,"",tupleNode.cloneNode(true),0);
        
    if(cordys.selectXMLNodes(LeftRolesModel.getData(),".//um:tuple").length == 0)
        addDataNode(LeftRolesModel,"",tupleNode.cloneNode(true),1);
    else
        addDataNode(LeftRolesModel,"",tupleNode.cloneNode(true),0);   
   
   if(cordys.selectXMLNodes(RightRolesModel.getData(),".//um:tuple").length == 0)
        addDataNode(RightRolesModel,"",tupleNode.cloneNode(true),1);
    else
        addDataNode(RightRolesModel,"",tupleNode.cloneNode(true),0);   
}


function roleTypeCheck_Change(eventObject)
{
    var objData = null;
    if(gSelectViewValue == "UR" || gSelectViewValue == "RR")
    {
        if(roleTypeCheck.getValue() == 1)
        {            
			for(var i=0,length = gRightInternalRolesArray.length;i<length;i++)
            {
				gRightArtifactFactoryObj.addArtifact(cordys.selectXMLNode(gRightInternalRolesArray[i],".//um:entry"));
				addDataNode(RightcontainerModel,"",gRightInternalRolesArray[i].cloneNode(true));
			}
              artifactviewerRight.arrangeBy("Name","ascending");
        }
        else
		{
            removeInternalArtifacts(gRightArtifactFactoryObj,gRightInternalRolesIdArray);
		    var rightContainerData = RightcontainerModel.getData();
            for(var i=0,length = gRightInternalRolesIdArray.length;i<length;i++)
            {
				var tupleNode = cordys.selectXMLNode(rightContainerData,".//um:tuple[um:old/um:entry[@dn = '"+gRightInternalRolesIdArray[i]+"']]");
				if(tupleNode)
					tupleNode.parentNode.removeChild(tupleNode);
			}
		}
        for(var i=0;i<gLeftSelectedArtifacts.length;i++)
            setCount(gLeftSelectedArtifacts[i]);
        if(gLeftSelectedArtifacts.length >0)   
            showObjects(gLeftSelectedArtifacts[i-1]);
    }
    if(gSelectViewValue != "UR")
    {
        if(roleTypeCheck.getValue() == 1)
        {             
            for(var i=0,length = gLeftInternalRolesArray.length;i<length;i++)
            {
				gLeftArtifactFactoryObj.addArtifact(cordys.selectXMLNode(gLeftInternalRolesArray[i],".//um:entry"));
				addDataNode(LeftcontainerModel,"",gLeftInternalRolesArray[i].cloneNode(true));
			}
            artifactviewerLeft.arrangeBy("Name","ascending");
        } 
        else
		{
            removeInternalArtifacts(gLeftArtifactFactoryObj,gLeftInternalRolesIdArray);
			var leftContainerData = LeftcontainerModel.getData();
            for(var i=0,length = gLeftInternalRolesIdArray.length;i<length;i++)
            {
				var tupleNode = cordys.selectXMLNode(leftContainerData,".//um:tuple[um:old/um:entry[@dn = '"+gLeftInternalRolesIdArray[i]+"']]");
				if(tupleNode)
					tupleNode.parentNode.removeChild(tupleNode);
			}
		}
    } 
    showEmptyLable();
}

function batchuser_Click(eventObject)
{
    var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
    setApplicationDefinition(userdetailsDialog,"multipleusersId","/cordys/usermanager/createbatchusers.caf",localization_get("Create Multiple Users"));
    application.showDialog(userdetailsDialog, "", null, newDialogCloseCallback, false);
}
function usermenu_Click(eventObject)
{
    var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
    setApplicationDefinition(userdetailsDialog,"multipleusersId","/cordys/usermanager/managemenus.caf",localization_get("Manage Menus and Toolbars"));
    application.showDialog(userdetailsDialog, gSearchString , null, menuDialogCloseCallback, false);
}
function defaultContext_Click(eventObject)
{
	var userdetailsDialog = userdetails.XMLDocument.documentElement.cloneNode(true);
	setApplicationDefinition(userdetailsDialog,"multipleusersId","/cordys/usermanager/managedeforg.caf",localization_get("Manage Default Organization"));
 application.showDialog(userdetailsDialog, gSearchString , null, newDialogCloseCallback, false);
}
function menuDialogCloseCallback()
{
    gRequestCount = 0;
    gFilterFlag  = 0;
    showContent(gSearchString ,SearchLDAPModel);   
}
function GetUsersForRolesModel_OnRequest(eventObject)
{
   gSoapfault = false;
   cordys.setNodeText(eventObject.request,".//um:dn", gCurrentOrganization);
}

function AuthUsersModel_OnRequest(eventObject)
{
    gSoapfault = false;

    var request = eventObject.request;
    cordys.setNodeText(request,".//um:scope", 2);
    cordys.setNodeText(request,".//um:sort", "ascending");
    cordys.setNodeText(request,".//um:dn", "cn=authenticated users,"+gLDAPRoot);
    cordys.setNodeText(request,".//um:filter", "objectclass=busauthenticationuser");
}

function DummyModel_OnRequest(eventObject)
{
    gSoapfault = false;
}

function Model_BeforeSynchronize(eventObject)
{
    eventObject.returnValue = false;
}
function SearchLDAPModel_OnRequest(eventObject)
{
    gSoapfault == false;
    var request = eventObject.request;
    if(gRequestCount == 0)
    {
        if(gSelectViewValue == "RU" ||  gSelectViewValue == "OUU" )
            setParamsForRequest(request, "cn=organizational users,"+gCurrentOrganization, "2", "&(objectclass=busorganizationaluser)(&(!(cn=SYSTEM))(!(cn=anonymous))(!(cn=wcpLicUser)))");
        else
            setParamsForRequest(request, "cn=organizational users,"+gCurrentOrganization, "2", gFilterString); 
    }
    else
    {
        var objClass = "";
        if(gSelectViewValue == "RR" || gSelectViewValue == "RU" ||  gSelectViewValue == "OUU"  || gSelectViewValue == "UOU" || gSelectViewValue == "RT")
        {
            if(gRequestCount == 1)
            {
                if(gFilterFlag == 0)
                   objClass = gFilterString;
                else if(gFilterFlag  == 1)
                   objClass = "objectclass=busorganizationalrole";
            }
            else if(gRequestCount ==2) 
                objClass = "objectclass=groupOfNames";
        }
        if(gSelectViewValue == "UR")
        {
            if(gRequestCount ==1)  // to get org roles
                objClass = "objectclass=busorganizationalrole";
            else if(gRequestCount == 2) // to get isvp roles
                objClass = "objectclass=groupOfNames";
        }
        if(gRequestCount == 1)
            setParamsForRequest(request, gCurrentOrganization, "2", objClass);
        else if(gRequestCount == 2)
            setParamsForRequest(request, gLDAPRoot, "1", objClass);      
    }
}

function SearchLDAPModel_OnResponse(eventObject)
{
    var modelId1 = "";
    var modelId2 = "";
    var flag = "";

    if(gFilterFlag ==0)
    {
        modelId1 = LeftcontainerModel;
        modelId2 = LeftRolesModel;
        flag = true;
    }
    else
    {
        modelId1 = RightcontainerModel;
        modelId2 = RightRolesModel;
        flag = false;
    }
    if(gRequestCount == 0)
    {
        updateModelData(eventObject.response,flag);
        modelId1.putData(eventObject.response.cloneNode(true),true,".//um:SearchLDAPResponse/*",true);      
        if(gSelectViewValue == "UR" || gSelectViewValue == "UT" || gSelectViewValue == "UOU" || gSelectViewValue == "OUU")
            gRequestCount = 0;
        else
            gRequestCount = 1;
        gFilterFlag = 0;
    }
    else if (gRequestCount == 1)
    {
        modelId2.putData(eventObject.response.cloneNode(true), true, ".//um:SearchLDAPResponse/*",true);
        updateModelData(eventObject.response,flag);
       modelId1.putData(eventObject.response.cloneNode(true), true, ".//um:SearchLDAPResponse/*",true);        
        gRequestCount++;
    }
    else if(gRequestCount == 2)
    {
        var entryNodes = cordys.selectXMLNodes(eventObject.response,".//um:entry");
        if(entryNodes.length>0)
        {
            mainRequest = cordys.cloneXMLDocument(mainReq.XMLDocument);
            cordys.setXMLNamespaces(mainRequest,{"SOAP":SOAP_NAMESPACE});
            for(var i=0;i < entryNodes.length;i++)
            {
                searchLDAPrequest = searchLDAP.XMLDocument.documentElement.cloneNode(true);
                cordys.setXMLNamespaces(searchLDAPrequest,{"um":LDAP_NAMESPACE});
                var dnValue = entryNodes[i].getAttribute("dn");
                if((gSelectViewValue == "RR" || gSelectViewValue == "RU" || gSelectViewValue == "RT"  || gSelectViewValue == "UOU") && gFilterFlag ==0 )
                    setParamsForRequest(searchLDAPrequest, dnValue, "1", gFilterString);
                else
                    setParamsForRequest(searchLDAPrequest, dnValue, "1", "objectclass=busorganizationalrole");
    
                cordys.appendXMLNode(searchLDAPrequest, cordys.selectXMLNode(mainRequest,".//SOAP:Body"));
            }
            DummyModel.setMethodRequest(mainRequest);
            DummyModel.getDataset();
            var dataNode  = DummyModel.getData().documentElement;
            XMLHelper.setXMLNamespace(dataNode,"um",LDAP_NAMESPACE);
            modelId2.putData(dataNode.cloneNode(true), true, ".//um:SearchLDAPResponse/*");
            updateModelData(dataNode,flag);
            modelId1.putData(dataNode.cloneNode(true), false, ".//um:SearchLDAPResponse/*");            
       }
       if(gSelectViewValue == "UR" || gSelectViewValue == "UT" || gSelectViewValue == "OUU" )
           gRequestCount = 0;
       else
          gRequestCount = 1;
       gFilterFlag  = 0;
    }
}
function TaskModel_OnRequest(eventObject)
{
    gSoapfault = false;
    var taskCollNode = cordys.selectXMLNode(eventObject.request,".//tns:GetTaskCollection");
    if(gTaskFlag == 0)
    {
        var tasknodetoremove = cordys.selectXMLNode(taskCollNode,"tns:Task");
        taskCollNode.removeChild(tasknodetoremove);
        taskCollNode.setAttribute("ignoreInternals","true");
    }
    else
    {
        var rightSelectedObjects = artifactviewerRight.getSelectedArtifacts();
        if(rightSelectedObjects.length == 0 && gSelectednode)
            rightSelectedObjects[0] = gSelectednode;
        var taskNode = cordys.selectXMLNode(taskCollNode,"tns:Task");
        taskNode.setAttribute("id",rightSelectedObjects[0].getID());

        taskNode.setAttribute("detail","true");
		taskNode.setAttribute("acl","true");
        for(var i=1,n1=rightSelectedObjects.length;i<n1;i++)
        {
            var l_taskNode = taskNode.cloneNode(true);
            l_taskNode.setAttribute("id",rightSelectedObjects[i].getID());
            cordys.appendXMLNode(l_taskNode,taskCollNode);
        }
    }
}
function DeleteAuthUsersModel_OnSOAPFault(eventObject)
{
 /*DeleteRecursive method tries to delete all the references in all organizations.
 If the login user doesn't have systemAdmin role, he can't delete references(here authenticated user references) for other organizations users.
 In that case Access denied soap fault will come. And suppressing the same here.*/
    var messageCode = cordys.getNodeText(eventObject.faultDetail, ".//cordys:MessageCode");
    if (messageCode == "Cordys.LDAP.Messages.objAccessDenied")
    {
        eventObject.showError = false;
    }
}
/*
getUserDetails will fail if the current login user doesnt have permissions in
other organisation in which its searching
*/
function GetUserDetailsOperationModel_OnSOAPFault(eventObject)
{
    gSoapfault = true;
    var messageCode = cordys.getNodeText(eventObject.faultDetail, ".//cordys:MessageCode");
    if (messageCode == "Cordys.LDAP.Messages.objAccessDenied")
    {
        gAccessDeniedFlag = true;
        eventObject.showError = false;
    }
}
function GetUnitsForAssignmentsModel_OnRequest(eventObject)
{
    var request = cordys.cloneXMLDocument(getUnitsForAssignmentsXML.XMLDocument);
    cordys.setXMLNamespaces(request,{"um":UNIT_NAMESPACE});
    if(gFilterString != "")
   {
        XMLHelper.setNodeText(request ,".//um:UseRegEx", "true");
        XMLHelper.setNodeText(request ,".//um:Filter", gFilterString);
   }
   cordys.setNodeText(request,".//um:WorkspaceID", gWorkspaceId);
   cordys.setNodeText(request,".//um:AssignmentRoot", gRootId);
   eventObject.request = request;
}
function RemoveUnitAndAssignmentsModel_OnRequest(eventObject)
{
    var LeftSelected = artifactviewerLeft.getSelectedArtifacts();
    var request = eventObject.request;
    XMLHelper.setNodeText(request,".//um:WorkspaceID",gWorkspaceId);
    XMLHelper.setNodeText(request,".//um:AssignmentRoot",gRootId);
    XMLHelper.setNodeText(request,".//um:UnitName",LeftSelected[0].getID());
}

function showDeletedAndISVteams()
{
    if(gSelectViewValue == "UOU")
    {
        var rightArtifacts = artifactviewerRight.getArtifacts();
        var rightArtifacts1 = artifactviewerRight.getArtifacts(false);
        var rightArtifactViewer = gLeftArtifactFactoryObj.getArtifactViewer();
        var ArtifactName = "";
        
        for(var i=0,len=rightArtifacts.length;i<len;i++)
        {
            var AppDef = rightArtifacts[i].getApplicationDefinition();
            ArtifactName = rightArtifacts[i].getName();
            if(XMLHelper.getNodeText(AppDef,".//um:Deleted") == "true")
            {                
                if(ArtifactName.indexOf("(no longer existing team)") < 0)
                {
                    ArtifactName = ArtifactName+"(no longer existing team)";                    
                }
                var artifactObj = rightArtifactViewer ._getArtifactObject(rightArtifacts1[i]);
                var artifactObjHTML = artifactObj.htmlElmt;
                artifactObjHTML.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity=50,style=0); COLOR: #808080";
                htmlutilId.addClassName("disabled",artifactObj.htmlElement());
                artifactObjHTML.style.cursor = "allowed";
            }
            rightArtifacts[i].setName(ArtifactName);
        }
    }
    else if (gSelectViewValue == "OUU")
    {
        var leftArtifacts = artifactviewerLeft.getArtifacts();
        var leftArtifacts1 = artifactviewerLeft.getArtifacts(false);
        var leftArtifactViewer = gLeftArtifactFactoryObj.getArtifactViewer();
        var ArtifactName ="";
        
        for(var i=0,len=leftArtifacts.length;i<len;i++)
        {
            var AppDef = leftArtifacts[i].getApplicationDefinition();
            ArtifactName = leftArtifacts[i].getName();
            if(XMLHelper.getNodeText(AppDef,".//um:Deleted") == "true")
            {                
                if(ArtifactName.indexOf("(no longer existing team)") < 0)
                {
                    ArtifactName = ArtifactName+"(no longer existing team)";                    
                }
                var artifactObj = leftArtifactViewer._getArtifactObject(leftArtifacts1[i]);
                var artifactObjHTML = artifactObj.htmlElmt;
                htmlutilId.addClassName("disabled",artifactObj.htmlElement());
                artifactObjHTML.style.cursor = "allowed";
            }
            leftArtifacts[i].setName(ArtifactName);
        }
    }
}
function searchButton_Click(eventObject)
{
    gSearchString = searchInput.getValue();
	if(gSelectViewValue == 	 "OUU")
	{
		showContent(gSearchString ,GetUnitsForAssignmentsModel);
	}
	else
	{
		showContent(gSearchString ,SearchLDAPModel);
	}
	
}
function onEnterPress(eventObejct)
{
 if(eventObejct.keyCode == 13)
 {
  searchButton_Click(eventObejct);
 }
}
function showAllButton_Click(eventObject)
{
 searchInput.setValue("");
 if(gSelectViewValue ==   "OUU")
 {
  showContent("",GetUnitsForAssignmentsModel);
 }
 else
 {
  showContent("",SearchLDAPModel);
 }

}]]>
			</xformsscript>
			<xforms:action
				ev:event="xforms-initialize-done">
				<xforms:Form_InitDone/>
			</xforms:action>
			<xforms:action
				ev:event="xforms-init">
				<xforms:Form_Init/>
			</xforms:action>
			<xforms:group
				appearance="elementbar"
				id="_elementBar"
				wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbar"
			/>
			<xforms:group
				appearance="controlbar"
				id="_controlBar"
				wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsControlbar"
			/>
			<xforms:group
				appearance="elementbar"
				id="_elementBar"
				wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbar"
			/>
			<xforms:group
				appearance="controlbar"
				id="_controlBar"
				wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsControlbar"
			/>
			<xforms:group
				appearance="elementbar"
				id="_elementBar"
				wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsElementbar"
			/>
			<xforms:group
				appearance="controlbar"
				id="_controlBar"
				wcpforms:designLibrary="cas.xforms.designerlibrary.controls.XFormsControlbar"
			/>
		</xformhtml>
	</XFormContent>
	<XFormWSDL/>
	<automatic>false</automatic>
	<caption></caption>
	<data/>
	<height></height>
	<imageUrl></imageUrl>
	<info></info>
	<isInternal>false</isInternal>
	<isLegacy>false</isLegacy>
	<isPublicImage>false</isPublicImage>
	<key>/Cordys/WCP/XForms/runtime/usermanager/usermanager.caf</key>
	<left></left>
	<mode>full</mode>
	<parameters/>
	<qualifiedclassname></qualifiedclassname>
	<showOnStartPage>false</showOnStartPage>
	<taskDescription>usermanager</taskDescription>
	<taskName>usermanager</taskName>
	<title>true</title>
	<top></top>
	<type>XForm</type>
	<width></width>
	<CompositeControls/>
	<Htms/>
	<Images/>
	<InstanceSchemaFragments/>
	<Javascripts/>
	<PackageInformation>
		<CordysBinaryReferenceCAPInfo
			type="com.cordys.cws.binaryreference.CordysBinaryReferenceCAPInfo"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-CE72EC21DD2A">
			<DocumentID>0027132C-F779-11E2-F8FA-CE72EC21BD2A</DocumentID>
			<Name>Untitled CordysBinaryReferenceCAPInfo</Name>
			<Description>Untitled CordysBinaryReferenceCAPInfo</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:42.575</CreationDate>
			<Notes/>
			<ArtifactID>005056C0-0008-11E0-F362-E14BA081B53D</ArtifactID>
			<CAPID>005056c0-0008-11e0-f2c7-d62405993fab</CAPID>
			<CAPName>Cordys Common Content Runtime</CAPName>
			<CAPVersion>verD1.002.001build23</CAPVersion>
		</CordysBinaryReferenceCAPInfo>
	</PackageInformation>
	<ReferredXForms/>
	<Representations/>
	<StyleSheets/>
	<TranslatableApplications/>
	<TranslatableName>
		<TranslatableText
			type="com.cordys.translation.TranslatableText"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-CE72EC205D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-CE72EC203D2A</DocumentID>
			<Name>0027132C-F779-11E2-F8FA-CE72EC203D2A</Name>
			<Description>0027132C-F779-11E2-F8FA-CE72EC203D2A</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.78</CreationDate>
			<Notes/>
			<Identifier>
				<uri
					id="0027132C-F779-11E2-F8FA-CE72EC209D2A"
				/>
			</Identifier>
		</TranslatableText>
	</TranslatableName>
	<TranslatableUITexts/>
	<Webservices/>
	<aclFragments/>
	<deliveryModels/>
	<image/>
	<input/>
	<messageParts>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B109D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B107D2A</DocumentID>
			<Name>DummyModel</Name>
			<Description>DummyModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B10DD2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B10BD2A</DocumentID>
			<Name>DeleteAuthUsersModel</Name>
			<Description>DeleteAuthUsersModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.091</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B111D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B10FD2A</DocumentID>
			<Name>UpdateLDAPModel</Name>
			<Description>UpdateLDAPModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.091</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B115D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B113D2A</DocumentID>
			<Name>RightcontainerModel</Name>
			<Description>RightcontainerModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B119D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B117D2A</DocumentID>
			<Name>GetUserDetailsOperationModel</Name>
			<Description>GetUserDetailsOperationModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.091</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/ldap</namespace>
			<operationName>GetUserDetails</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B11DD2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B11BD2A</DocumentID>
			<Name>GetLDAPObjectOperationModel</Name>
			<Description>GetLDAPObjectOperationModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.09</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/ldap</namespace>
			<operationName>GetLDAPObject</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B121D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B11FD2A</DocumentID>
			<Name>LeftcontainerModel</Name>
			<Description>LeftcontainerModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.093</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B125D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B123D2A</DocumentID>
			<Name>AuthUsersModel</Name>
			<Description>AuthUsersModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/ldap</namespace>
			<operationName>SearchLDAP</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B129D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B127D2A</DocumentID>
			<Name>LeftRolesModel</Name>
			<Description>LeftRolesModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.091</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B12DD2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B12BD2A</DocumentID>
			<Name>RightRolesModel</Name>
			<Description>RightRolesModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName></operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B131D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B12FD2A</DocumentID>
			<Name>SearchLDAPModel</Name>
			<Description>SearchLDAPModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.093</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/ldap</namespace>
			<operationName>SearchLDAP</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B135D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B133D2A</DocumentID>
			<Name>TaskModel</Name>
			<Description>TaskModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/task/1.0/runtime/</namespace>
			<operationName>GetTaskCollection</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B139D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B137D2A</DocumentID>
			<Name>GetUnitsForAssignmentsModel</Name>
			<Description>GetUnitsForAssignmentsModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.091</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</namespace>
			<operationName>GetUnitsForAssignments</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B13DD2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B13BD2A</DocumentID>
			<Name>RemoveUnitAndAssignmentsModel</Name>
			<Description>RemoveUnitAndAssignmentsModel</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>true</isRefExists>
			<namespace>http://schemas.cordys.com/userassignment/UserAssignmentService/1.0</namespace>
			<operationName>RemoveUnitAndAssignments</operationName>
		</MessagePart>
		<MessagePart
			type="com.cordys.task.MessagePart"
			RuntimeDocumentID="0027132C-F779-11E2-F8FA-ED0A8B141D2A">
			<DocumentID>0027132C-F779-11E2-F8FA-ED0A8B13FD2A</DocumentID>
			<Name>freeformcontrols</Name>
			<Description>freeformcontrols</Description>
			<CreatedBy>cordysadm</CreatedBy>
			<CreationDate>2013-05-28T20:44:43.092</CreationDate>
			<Notes/>
			<isRefExists>false</isRefExists>
			<namespace>http://schemas.cordys.com/1.0/xforms/processapi</namespace>
			<operationName>freeformcontrols</operationName>
		</MessagePart>
	</messageParts>
	<messages/>
	<output/>
	<tagsContainer/>
	<taskParts/>
</XFormRuntime>
