/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;

import com.cordys.coe.tools.useradmin.cordys.Role;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;


/**
 * UI class to support the maintanance of user roles.
 * To exchange user role data between client and server, there are 2 options. First is to have a flat list 
 * of roles (including boolean on assigned true/false). This list is in a tuple, and regular tuple protocol can be 
 * used to update the user roles.
 * Second option is get the roles by trees, so each role including it's subroles. The data exchange is by free NOM xml. It has
 * a section for the assigned role trees, and for the unassigned role trees.
 * 
 * @author kekema
 *
 */
public class UIUserRoles extends UIUserRolesBase
{
    public UIUserRoles()
    {
        this((BusObjectConfig)null);
    }

    public UIUserRoles(BusObjectConfig config)
    {
        super(config);
    }
    
    /**
     * Get all roles where the 'Assigned' boolean is indicating if the role is assigned to the given user.
     * The list is returned within a tuple (with repeating structure for role).
     * 
     * This get method can be used when applying tuple protocol for get/update.
     * 
     * @param orgUserDN
     * @return
     */
    public static UIUserRoles getUIUserRoles(String orgUserDN)
    {
    	//orgUserDN = "cn=cordysadm,cn=organizational users,o=EkemaIT,cn=cordys,cn=defaultInst,o=Cordys";
    	
    	UIUserRoles uiUserRoles = new UIUserRoles();
    	uiUserRoles.makeTransient();
    	uiUserRoles.setOrgUserDN(orgUserDN);
    	UIUserRoles.Roles roles = new UIUserRoles.Roles();
    	uiUserRoles.setRolesObject(roles);
    	
    	// use seqNo for each role as to enable this no to be used client-side as a reference
    	int seqNo = 0;
    	// add assigned roles to inner repeating roles/role structure
    	ArrayList<String> assignedRoles = Role.getAssignedRoles(orgUserDN);
    	seqNo = roles.addRoles(assignedRoles, seqNo, true);
    	// add unassigned roles 
    	ArrayList<String> unassignedRoles = Role.getUnassignedRoles(orgUserDN);
    	seqNo = roles.addRoles(unassignedRoles, seqNo, false);
    	
    	return uiUserRoles;
    }

    /**
     * Get all assigned roles for the user, each role with it's tree of subroles.
     * 
     * @param orgUserDN
     * @return
     */
    public static int getUIRoleTrees(String orgUserDN)
    {
    	//orgUserDN = "cn=cordysadm,cn=organizational users,o=EkemaIT,cn=cordys,cn=defaultInst,o=Cordys";
    	
        return(Role.getUserRoleTrees(orgUserDN));
    }
    
    /**
     * Update the user assigned roles.
     * 
     * @param orgUserDN
     * @param assignedRoles		a NOM xml with the top roles from the assigned roles trees
     * @return
     */
    public static int updateAssignedRoles(String orgUserDN, int assignedRoles)
    {
    	//orgUserDN = "cn=cordysadm,cn=organizational users,o=EkemaIT,cn=cordys,cn=defaultInst,o=Cordys";
    	
    	if (Util.isSet(orgUserDN))
    	{
    		// compose array list from assigned roles in xml
	    	ArrayList<String> assignedRoleDNs = new ArrayList<String>();
	    	int[] roleNodes = XPath.getMatchingNodes(".//role", null, assignedRoles);
	        for (int roleNode : roleNodes)
	        {
	        	String roleDN = Node.getAttribute(roleNode, "id");
	        	if (!Util.isSet(roleDN))
	        	{
	        		roleDN = Node.getAttribute(roleNode, "dn");
	        	}
	        	if (!assignedRoleDNs.contains(roleDN))
	        	{
	        		assignedRoleDNs.add(roleDN);
	        	}
	        }
	        Role.updateAssignedRoles(orgUserDN, assignedRoleDNs);
    	}
    	return 0;		// can be used in future in case read-back is needed
    }

    public void onInsert()
    {
    	// N.A.
    }

    /**
     * Update as per tuple/new with inner list of assigned roles
     */
    public void onUpdate()
    {
    	// compose arraylist of assigned roles from inner list
    	ArrayList<String> assignedRoleDNs = new ArrayList<String>();
    	BusObjectIterator<UIUserRoles.Roles.Role> roles = this.getRolesObject().getRoleObjects();
    	while (roles.hasMoreElements())
    	{
    		UIUserRoles.Roles.Role role = (UIUserRoles.Roles.Role)roles.nextElement();
    		if (role.getAssigned())
    		{
    			assignedRoleDNs.add(role.getRoleDN());
    		}
    	}
    	Role.updateAssignedRoles(this.getOrgUserDN(), assignedRoleDNs); 	
    }

    public void onDelete()
    {
    	// N.A.
    }

    /**
     * Inner class Roles 
     *
     */
    public static class Roles extends UIUserRoles.RolesBase
    {
        public Roles()
        {
            this((BusObjectConfig)null);
        }

        public Roles(BusObjectConfig config)
        {
            super(config);
        }
        
        /**
         * Add roles from arraylist to inner list
         * 
         * @param roleDNs
         * @param seqNo
         * @param assigned
         * @return
         */
        private int addRoles(ArrayList<String> roleDNs, int seqNo, boolean assigned)
        {
        	for (String roleDN : roleDNs)
        	{
        		seqNo = (Integer)(seqNo+1);
        		UIUserRoles.Roles.Role role = new UIUserRoles.Roles.Role();
        		role.setSeqNo(seqNo);
        		role.setRoleDN(roleDN);
        		String roleName = Util.getNameFromDN(roleDN);
        		role.setRoleName(roleName);
        		role.setAssigned(assigned);
        		addRoleObject(role);
        	}
        	return seqNo;
        }

        public void onInsert()
        {
        	// N.A.
        }

        public void onUpdate()
        {
        	// N.A.
        }

        public void onDelete()
        {
        	// N.A.
        }

        /**
         * Inner repeating structure for role
         *
         */
        public static class Role extends UIUserRoles.Roles.RoleBase
        {
            public Role()
            {
                this((BusObjectConfig)null);
            }

            public Role(BusObjectConfig config)
            {
                super(config);
            }

            public void onInsert()
            {
            	// N.A.
            }

            public void onUpdate()
            {
            	// N.A.
            }

            public void onDelete()
            {
            	// N.A.
            }

        }
    }
}
