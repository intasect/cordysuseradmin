/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;

import com.cordys.coe.tools.useradmin.cordys.CordysObject;
import com.cordys.coe.tools.useradmin.cordys.CordysObjectList;
import com.cordys.coe.tools.useradmin.cordys.Task;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;


public class UIUserTasks extends UIUserTasksBase
{
    public UIUserTasks()
    {
        this((BusObjectConfig)null);
    }

    public UIUserTasks(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Get all tasks with indicator whether the task is assigned to the user.
     * Split up between all indirectly assigned tasks (via roles), and the remaining list of tasks (see wsapps class structure)
     * 
     * @param orgUserDN
     * @param firstRequest
     * @return
     */
    public static UIUserTasks getUIUserTasks(String orgUserDN, boolean firstRequest)
    {
    	UIUserTasks uiUserTasks = new UIUserTasks();
    	uiUserTasks.makeTransient();
    	uiUserTasks.setOrgUserDN(orgUserDN);
    	UIUserTasks.RoleTasks roleTasks = new UIUserTasks.RoleTasks();
    	uiUserTasks.setRoleTasksObject(roleTasks);
    	UIUserTasks.UITasks uiTasks = new UIUserTasks.UITasks();
    	uiUserTasks.setUITasksObject(uiTasks);
    	
    	int seqNo = 0;
    	
    	// assigned role tasks
    	CordysObjectList assignedRoleTasks = null;
    	try
    	{
	    	assignedRoleTasks = Task.getAssignedRoleTasks(orgUserDN);
	    	for (CordysObject cordysObject : assignedRoleTasks.getList())
	    	{
	    		seqNo++;
	    		roleTasks.addRoleTaskObject(constructUITask(seqNo, (Task)cordysObject, true));	    		
	    	}
    	}
    	finally
    	{
    		// assignedRoleTasks objects do wrap NOM xml structures, so cleanup
    		if (assignedRoleTasks != null)
    		{
    			assignedRoleTasks.cleanup();
    		}    		
    	}
    	
    	// assigned tasks
    	CordysObjectList assignedTasks = null;
    	try
    	{
	    	assignedTasks = Task.getAssignedTasks(orgUserDN);
	    	for (CordysObject cordysObject : assignedTasks.getList())
	    	{
	    		seqNo++;
	    		uiTasks.addUITaskObject(constructUITask(seqNo, (Task)cordysObject, true));
	    	}
    	}
    	finally
    	{
    		// assignedTasks objects do wrap NOM xml structures, so cleanup
    		if (assignedTasks != null)
    		{
    			assignedTasks.cleanup();
    		}  
    	}
    	
    	// unassigned tasks
    	CordysObjectList unassignedTasks = null;
    	try
    	{
    		boolean refreshCache = firstRequest;
    		unassignedTasks = Task.getUnassignedTasks(orgUserDN, refreshCache);
	    	for (CordysObject cordysObject : unassignedTasks.getList())
	    	{	    		
	    		seqNo++;
	    		uiTasks.addUITaskObject(constructUITask(seqNo, (Task)cordysObject, false));	    		
	    	}
		}
		finally
		{
			if (unassignedTasks != null)
			{
				unassignedTasks.cleanup();
			}  
		}	    	
    	
        return uiUserTasks;
    }

    private static UITask constructUITask(int seqNo, Task task, boolean assigned)
    {
		UITask uiTask = new UITask();
		uiTask.makeTransient();
		uiTask.setSeqNo(seqNo);
		uiTask.setTaskID(task.getID());
		uiTask.setName(task.getName());
		uiTask.setTaskType(task.getType());
		uiTask.setAssigned(assigned);
		return uiTask;
    }
    
    public void onInsert()
    {
    	// N.A.
    }

    /** 
     * Update the user task assignments as per the 'Assigned' indicator. 
     * 
     */
    public void onUpdate()
    {
    	String orgUserDN = this.getOrgUserDN();
    	if (this.getUITasksObject() != null)
    	{
    		// collect all assigned task IDs
    		ArrayList<String> assignedTaskIDs = new ArrayList<String>();
	        BusObjectIterator<UITask> uiTasks = this.getUITasksObject().getUITaskObjects();
	        while (uiTasks.hasMoreElements())
	        {
	        	UITask uiTask = uiTasks.nextElement();
	        	if (uiTask.getAssigned())
	        	{
	        		assignedTaskIDs.add(uiTask.getTaskID());
	        	}
	        }
	        // give to update
	        Task.updateAssignedTasks(orgUserDN, assignedTaskIDs);
    	}
        // read back the actual content
        UIUserTasks uiUserTasksDB = UIUserTasks.getUIUserTasks(orgUserDN, false);
        if (uiUserTasksDB != null)
        {
        	UIUserTasks.RoleTasks roleTasksDB= uiUserTasksDB.getRoleTasksObject();
        	UIUserTasks.RoleTasks roleTasksActual = new UIUserTasks.RoleTasks(new BusObjectConfig(roleTasksDB, BusObjectConfig.TRANSIENT_OBJECT));
        	this.setRoleTasksObject(roleTasksActual);
        	UIUserTasks.UITasks uiTasksDB= uiUserTasksDB.getUITasksObject();
        	UIUserTasks.UITasks uiTasksActual = new UIUserTasks.UITasks(new BusObjectConfig(uiTasksDB, BusObjectConfig.TRANSIENT_OBJECT));
        	this.setUITasksObject(uiTasksActual);
        }
    }

    public void onDelete()
    {
    	// N.A.
    }

    /**
     * Inner class for indirectly assigned tasks via assigned roles
     *
     */
    public static class RoleTasks extends UIUserTasks.RoleTasksBase
    {
        public RoleTasks()
        {
            this((BusObjectConfig)null);
        }

        public RoleTasks(BusObjectConfig config)
        {
            super(config);
        }

        public void onInsert()
        {
        	// N.A.
        }

        public void onUpdate()
        {
        	// N.A.
        }

        public void onDelete()
        {
        	// N.A.
        }

    }
    
    /**
     * Inner class for remaining assigned/unassigned tasks
     *
     */
    public static class UITasks extends UIUserTasks.UITasksBase
    {
        public UITasks()
        {
            this((BusObjectConfig)null);
        }

        public UITasks(BusObjectConfig config)
        {
            super(config);
        }

        public void onInsert()
        {
        	// N.A.
        }

        public void onUpdate()
        {
        	// N.A.        	
        }

        public void onDelete()
        {
        	// N.A.        	
        }

    }
}
