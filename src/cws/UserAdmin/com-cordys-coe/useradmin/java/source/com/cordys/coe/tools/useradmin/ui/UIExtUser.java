/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Vector;

import com.cordys.coe.tools.useradmin.User;
import com.cordys.coe.tools.useradmin.cordys.CordysObject;
import com.cordys.coe.tools.useradmin.cordys.CordysObjectList;
import com.cordys.coe.tools.useradmin.cordys.CordysUser;
import com.cordys.coe.tools.useradmin.cordys.ExtGroup;
import com.cordys.coe.tools.useradmin.cordys.ExtUser;
import com.cordys.coe.tools.useradmin.util.UserSyncConfig;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectArray;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;

/**
 * Class to support UI on synchoronizing users from ext directory
 * 
 * @author kekema
 *
 */
public class UIExtUser extends UIExtUserBase
{
    public UIExtUser()
    {
        this((BusObjectConfig)null);
    }

    public UIExtUser(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Get the users from ext directory as belonging to the given group (optionally including subgroups)
     * 
     * @param groupDN
     * @param includeSubgroups
     * @return
     */
    public static BusObjectIterator<UIExtUser> getUIExtUserObjects(String groupDN, boolean includeSubgroups)
    {
    	if (groupDN != null)
    	{
    		groupDN = groupDN.replaceAll("[\\n\\t]", "");
    	}
    	Vector<UIExtUser> result = new Vector<UIExtUser>();
    	if (Util.isSet(groupDN))
    	{
	    	HashSet<String> groupMembers = null;
	        if (includeSubgroups)
	        {
	        	// get all groupmembers (so including subgroups) 
	        	// this info is needed lateron as to give the correct group(s) a user is belonging to
	        	groupMembers = ExtGroup.getGroupMembers(groupDN);
	        }
	        CordysObjectList extUsers = null;
	        UserSyncConfig userSyncConfig = null;
	        try
	        {
		        userSyncConfig = UserSyncConfig.loadConfig();
		        // get the user search root
		        String userSearchRoot = userSyncConfig.getUserSearchRoot(groupDN, null);
	        	// get all users of the group (optionally including users from subgroups)
		        extUsers = ExtUser.getGroupUsers(groupDN, userSearchRoot, includeSubgroups);
		        for (CordysObject cordysObject : extUsers.getList())
		        {
		        	ExtUser extUser = (ExtUser)cordysObject;
		        	UIExtUser uiExtUser = new UIExtUser();
		        	uiExtUser.makeTransient();
		        	uiExtUser.setExtUserDN(extUser.getDN());
		        	String description = extUser.getDisplayName();
		        	if (!Util.isSet(description))
		        	{
		        		description = extUser.getCN();
		        	}
		        	uiExtUser.setDescription(description);
		        	String group = "";
		        	ArrayList<String> memberOfList = extUser.getMemberOfList();
		        	// compose value for group which gives all relevant groups seperated by comma
		        	for (String memberOf : memberOfList)
		        	{
		        		// check if this group equals to the input group or a subgroup - only in that case, the group to be included in output
		        		if ((groupDN.equals(memberOf)) || (includeSubgroups && groupMembers.contains(memberOf)))
		        		{
		        			if (!Util.isSet(uiExtUser.getExtGroupDN()) || groupDN.equals(memberOf))
		        			{
		        				uiExtUser.setExtGroupDN(memberOf);
		        			}
		        			String groupName =  Util.getNameFromDN(memberOf);
		        			if (group.length() > 0)
		        			{
		        				group = group + ", " + groupName;
		        			}
		        			else
		        			{
		        				group = groupName;
		        			}
		        		}
		        	}
		        	uiExtUser.setGroup(group);
		        	String orgUserDN = "cn=" + extUser.getCN() + ",cn=organizational users," + BSF.getOrganization();
		        	boolean isOrganizationalUser = CordysUser.organizationalUserExists(orgUserDN);
		        	uiExtUser.setIsCordysUser(isOrganizationalUser);
		        	result.add(uiExtUser);
		        }
	        }
	        finally
	        {
	        	if (extUsers != null)
	        	{
	    	        extUsers.cleanup();
	        	}
	        	if (userSyncConfig != null)
	        	{
	        		userSyncConfig.clearConfig();
	        	}
	        }
    	}
        return new BusObjectArray<UIExtUser>(result);
    }
    
    /**
     * Synchronize user from ext directory into Cordys including any given role/task/team assignments.
     * 
     * @param extUserDN
     * @param uiSyncUserData
     */
    public static void syncExtUser(String extUserDN, UISyncUserData uiSyncUserData)
    {
    	ExtUser extUser = null;
    	try
    	{
    		extUser = ExtUser.getExtUser(extUserDN);
	    	String extGroupDN = uiSyncUserData.getExtGroupDN();
	    	if (extUser != null)
	    	{
	    		// insert/update user in cordys
	    		User.importExtDirUser(false, extUser.getCN(), extUser.getDistinguishedName(), extGroupDN, extUser.getDisplayName(), 
	    				              extUser.getPostalAddress(), extUser.getCompany(), extUser.getTelephoneNumber(), extUser.getMail());
	    		
	    		// assign roles 
	    		String orgUserDN = "cn=" + extUser.getCN() + ",cn=organizational users," + BSF.getOrganization();
	    		UIUserUpdateData updateData = new UIUserUpdateData();
	    		updateData.makeTransient();
	    		UIAssignments roleAssignments = uiSyncUserData.getRoleAssignmentsObject();
	    		if (roleAssignments != null)
	    		{
	    			UIAssignments uiAssignments = new UIAssignments(new BusObjectConfig(roleAssignments, BusObjectConfig.TRANSIENT_OBJECT));
	    			updateData.setAssignmentsObject(uiAssignments);
	    			UIMultipleUser.maintainRoles(orgUserDN, UIMultipleUser.AC_ASSIGN_ROLES, updateData);
	    		}
	    		// assign tasks
	    		updateData = new UIUserUpdateData();
	    		updateData.makeTransient();
	    		UIAssignments taskAssignments = uiSyncUserData.getTaskAssignmentsObject();
	    		if (taskAssignments != null)
	    		{
	    			UIAssignments uiAssignments = new UIAssignments(new BusObjectConfig(taskAssignments, BusObjectConfig.TRANSIENT_OBJECT));
	    			updateData.setAssignmentsObject(uiAssignments);
	    			UIMultipleUser.maintainTasks(orgUserDN, UIMultipleUser.AC_ASSIGN_TASKS, updateData);
	    		}
	    		// assign teams
	    		updateData = new UIUserUpdateData();
	    		updateData.makeTransient();
	    		UIAssignments teamAssignments = uiSyncUserData.getTeamAssignmentsObject();
	    		if (teamAssignments != null)
	    		{
	    			UIAssignments uiAssignments = new UIAssignments(new BusObjectConfig(teamAssignments, BusObjectConfig.TRANSIENT_OBJECT));
	    			updateData.setAssignmentsObject(uiAssignments);
	    			UIMultipleUser.maintainTeams(orgUserDN, UIMultipleUser.AC_ASSIGN_TEAMS, updateData, false);
	    		}
	    	}
    	}
    	finally
    	{
    		if (extUser != null)
    		{
    			extUser.cleanup();
    		}
    	}
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	// N.A.
    }

    public void onDelete()
    {
    	// N.A.
    }

}
