/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;

import com.cordys.coe.tools.useradmin.cordys.CordysObject;
import com.cordys.coe.tools.useradmin.cordys.CordysObjectList;
import com.cordys.coe.tools.useradmin.cordys.ExtGroup;
import com.cordys.coe.tools.useradmin.cordys.Role;
import com.cordys.coe.tools.useradmin.cordys.Task;
import com.cordys.coe.tools.useradmin.cordys.Unit;
import com.cordys.coe.tools.useradmin.util.UserSyncConfig;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BusObjectArray;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;

/**
 * Generic class for representing items for a UI list. 
 * The class can be used to load either all roles, tasks, teams or ext directory groups.
 * The items are tagged by generic attributes: seqNo, id, dn, description.
 * The seqNo can be used client-side to reference the data object as corresponding to the ui list item.
 * 
 * @author kekema
 *
 */
public class UIListItem extends UIListItemBase
{
	// list type
	private static final int LT_ROLES = 1;
	private static final int LT_TASKS = 2;
	private static final int LT_TEAM_ROLES = 3;
	private static final int LT_ROLES_FOR_TEAM = 4;	
	private static final int LT_TEAMS = 5;
	private static final int LT_EXT_GROUPS = 100;
	
    public UIListItem()
    {
        this((BusObjectConfig)null);
    }

    public UIListItem(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Get items for either all roles, tasks, teams or ext dir groups.
     * 
     * @param listType
     * @param firstTasksRequest
     * @return
     */
    public static BusObjectIterator<UIListItem> getUIListItems(int listType, String filter, boolean firstTasksRequest, boolean addEmptyOption)
    {
        Vector<UIListItem> result = null;
        
        switch (listType)
        {
	        case LT_ROLES:
	        {
	        	result = getRoles(null, addEmptyOption);
	        	break;
	        }
	        case LT_TASKS:
	        {
	        	boolean refreshCache = firstTasksRequest;
	        	result = getTasks(refreshCache, addEmptyOption);
	        	break;
	        }
	        case LT_TEAM_ROLES:
	        {
	        	result = getTeamRoles(addEmptyOption);
	        	break;
	        }
	        case LT_ROLES_FOR_TEAM:
	        {
	        	result = getRoles(filter, addEmptyOption);
	        	break;
	        }
	        case LT_TEAMS:
	        {
	        	result = getTeams(addEmptyOption);
	        	break;
	        }	        
	        case LT_EXT_GROUPS:
	        {
	        	result = getExtDirectoryGroups();
	        	break;
	        }
        }
        return new BusObjectArray<UIListItem>(result);
    }
    
    /**
     * Populate list items with either all defined roles (all isv roles plus roles of current organization), or
     * with the roles as the exists within a team.
     * 
     * @param unitID			if empty, all roles will be given
     * @param addEmptyOption
     * @return
     */
    private static Vector<UIListItem> getRoles(String unitID, boolean addEmptyOption)
    {
    	Vector<UIListItem> result = new  Vector<UIListItem>();
    	ArrayList<String> roleDNs = new ArrayList<String>();
    	if (Util.isSet(unitID))
    	{
    		roleDNs = Unit.getUnitRoles(unitID);
    	}
    	else
    	{
    		roleDNs = Role.getAllRoles(false);
    	}
    	int seqNo = 0;
    	if (addEmptyOption)
    	{
			seqNo++;
			UIListItem uiListItem = new UIListItem();
			uiListItem.setSeqNo(seqNo);
			uiListItem.setDN("");
			uiListItem.setDescription("");
			result.add(uiListItem);
    	}
    	for (String roleDN : roleDNs)
    	{
    		seqNo++;
    		UIListItem uiListItem = new UIListItem();
    		uiListItem.setSeqNo(seqNo);
    		uiListItem.setDN(roleDN);
    		String roleName = Util.getNameFromDN(roleDN);
    		uiListItem.setDescription(roleName);
    		result.add(uiListItem);
    	}
    	return result;
    }
    
    /**
     * Populate list items with all defined tasks.
     * 
     * @param refreshCache
     * @return
     */    
    private static Vector<UIListItem> getTasks(boolean refreshCache, boolean addEmptyOption)
    {
    	Vector<UIListItem> result = new  Vector<UIListItem>();
    	CordysObjectList allTasks = null;
    	try
    	{
    		allTasks = Task.getAllTasks(refreshCache);
	    	int seqNo = 0;
	    	if (addEmptyOption)
	    	{
				seqNo++;
				UIListItem uiListItem = new UIListItem();
				uiListItem.setSeqNo(seqNo);
				uiListItem.setID("");
				uiListItem.setDescription("");
				result.add(uiListItem);
	    	}    	
	    	for (CordysObject cordysObject : allTasks.getList())
	    	{
	    		Task task = (Task)cordysObject;
	    		seqNo++;
	    		UIListItem uiListItem = new UIListItem();
	    		uiListItem.setSeqNo(seqNo);
	    		uiListItem.setID(task.getID());
	    		uiListItem.setDescription(task.getName());
	    		result.add(uiListItem);
	    	}
    	}
    	finally
    	{
    		if (allTasks != null)
    		{
    			allTasks.cleanup();
    		}
    	}
    	return result;
    }
    
    /**
     * Populate list items with all unit/role combinations.
     * 
     * @return
     */    
    private static Vector<UIListItem> getTeamRoles(boolean addEmptyOption)
    {
    	Vector<UIListItem> result = new  Vector<UIListItem>();
    	
    	CordysObjectList allUnits = null;
    	try
    	{
	    	allUnits = Unit.getAllUnits();
	    	HashMap<String, String> unitNamesByID = Unit.getUnitNamesByID(allUnits);
	    	HashMap<String, String> unitQNamesByID = Unit.getUnitQNamesByID(allUnits);
	    	int seqNo = 0;
	    	if (addEmptyOption)
	    	{
				seqNo++;
				UIListItem uiListItem = new UIListItem();
				uiListItem.setSeqNo(seqNo);
				uiListItem.setDN("");
				uiListItem.setID("");
				uiListItem.setDescription("");
				result.add(uiListItem);
	    	}
	        for (CordysObject cordysObject : allUnits.getList())
	        {
	        	Unit unit = (Unit)cordysObject;
	        	String unitID = unit.getID();
	        	ArrayList<String> unitRoles = Unit.getUnitRoles(unitID);
	        	for (String roleDN : unitRoles)
	        	{
	        		seqNo++;
	        		UIListItem uiListItem = new UIListItem();
	        		uiListItem.setSeqNo(seqNo);
	        		uiListItem.setID(unitID);
	        		uiListItem.setDN(roleDN);
	        		String unitName = unitNamesByID.get(unitID);
	        		String unitQName = unitQNamesByID.get(unitID);
	        		String roleName = Util.getNameFromDN(roleDN);
	        		uiListItem.setDescription(unitName + "/" + roleName);
	        		uiListItem.setLongDescription(unitQName);
	        		result.add(uiListItem);
	        	}
	        }
    	}
    	finally
    	{
    		if (allUnits != null)
    		{
    			allUnits.cleanup();
    		} 
    	}
    	return result;
    }
    
    /**
     * Populate list items with all units to which users can be assigned
     * 
     * @return
     */    
    private static Vector<UIListItem> getTeams(boolean addEmptyOption)
    {
    	Vector<UIListItem> result = new  Vector<UIListItem>();
    	
    	CordysObjectList allUnits = null;
    	try
    	{
	    	allUnits = Unit.getAllUnits();
	    	HashMap<String, String> unitNamesByID = Unit.getUnitNamesByID(allUnits);
	    	HashMap<String, String> unitQNamesByID = Unit.getUnitQNamesByID(allUnits);
	    	int seqNo = 0;
	    	if (addEmptyOption)
	    	{
				seqNo++;
				UIListItem uiListItem = new UIListItem();
				uiListItem.setSeqNo(seqNo);
				uiListItem.setDN("");
				uiListItem.setID("");
				uiListItem.setDescription("");
				result.add(uiListItem);
	    	}
	        for (CordysObject cordysObject : allUnits.getList())
	        {
	        	Unit unit = (Unit)cordysObject;
	        	String unitID = unit.getID();
	        	// check if any roles defined
	        	ArrayList<String> unitRoles = Unit.getUnitRoles(unitID);
	        	if (unitRoles.size() > 0)
	        	{
		    		seqNo++;
		    		UIListItem uiListItem = new UIListItem();
		    		uiListItem.setSeqNo(seqNo);
		    		uiListItem.setID(unitID);
		        	String unitName = unitNamesByID.get(unitID);
		        	String unitQName = unitQNamesByID.get(unitID);
		        	uiListItem.setDescription(unitName);
		        	uiListItem.setLongDescription(unitQName);
		        	result.add(uiListItem);
	        	}
	        }
    	}
    	finally
    	{
    		if (allUnits != null)
    		{
    			allUnits.cleanup();
    		} 
    	}    	
    	return result;
    }
      
    /**
     * Populate list items with external directory groups as defined in the usersync config.
     * 
     * @return
     */
    private static Vector<UIListItem> getExtDirectoryGroups()
    {
    	Vector<UIListItem> result = new  Vector<UIListItem>();
    	UserSyncConfig userSyncConfig = UserSyncConfig.loadConfig();
    	if (userSyncConfig != null)
    	{
    		int seqNo = 0;
    		ArrayList<String> groupDNs = userSyncConfig.getGroupDNs();
    		for (String groupDN : groupDNs)
    		{
    			seqNo++;
    			UIListItem uiListItem = new UIListItem();
    			uiListItem.setSeqNo(seqNo);
    			uiListItem.setDN(groupDN);
    			String groupName = ExtGroup.getGroupDisplayName(groupDN);
    			if (!Util.isSet(groupName))
    			{
    				groupName = Util.getNameFromDN(groupDN);
    			}
    			uiListItem.setDescription(groupName);
    			result.add(uiListItem);
    		}
    	}
    	return result;
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	// N.A.    	
    }

    public void onDelete()
    {
    	// N.A.    	
    }

}
