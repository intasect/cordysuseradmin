/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin;

import java.util.ArrayList;

import com.cordys.coe.tools.useradmin.exception.UserAdminException;
import com.cordys.coe.tools.useradmin.util.PasswordHashAndDigest;
import com.cordys.coe.tools.useradmin.util.UserSyncConfig;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;

/**
 * Class to support UI for UserSync configuration.
 * The actual storage is in XMLStore via UserSyncConfig class.
 * 
 * @author kekema
 *
 */
public class UserSyncConfiguration extends UserSyncConfigurationBase
{
	private final static int NR_EXT_GROUPS = 5;		// number of extra groups which can be specified
	private final static int NR_ROLE_ROWS = 10;		// number of rows enabled per group for roles to be assigned
	
    public UserSyncConfiguration()
    {
        this((BusObjectConfig)null);
    }

    public UserSyncConfiguration(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Load the user sync config from xmlstore and map to UserSyncConfiguration object.
     * 
     */
    public static UserSyncConfiguration getUserSyncConfigurationObject()
    {
    	UserSyncConfiguration appConfig = null;
    	// read from XMLStore
    	UserSyncConfig xsConfig = null;
    	try
    	{
    		xsConfig = UserSyncConfig.loadConfig();
    		// compose instance structure
    		appConfig = new UserSyncConfiguration();
    		appConfig.makeTransient();
    		appConfig.setIncludeSubgroups(xsConfig.getIncludeSubgroups(false));
    		UserSyncConfiguration.Groups groups = new UserSyncConfiguration.Groups();
    		appConfig.setGroupsObject(groups);
    		ArrayList<String> groupDNs = xsConfig.getGroupDNs();
    		for (String groupDN : groupDNs)
    		{
    			UserSyncConfiguration.Groups.Group group = new UserSyncConfiguration.Groups.Group();
    			groups.addGroupObject(group);
    			group.setDN(groupDN);
    			group.setUserSearchRoot(xsConfig.getUserSearchRoot(groupDN, ""));
    			UserSyncConfiguration.Groups.Group.AssignRoles assignRoles = new UserSyncConfiguration.Groups.Group.AssignRoles();
    			group.setAssignRolesObject(assignRoles);
    			ArrayList<String> xsAssignRoles = xsConfig.getAssignRoles(groupDN);
    			for (String xsAssignRole : xsAssignRoles)
    			{
    				UserSyncConfiguration.Groups.Group.AssignRoles.Role assignRole = new UserSyncConfiguration.Groups.Group.AssignRoles.Role();
    				assignRoles.addRoleObject(assignRole);
    				assignRole.setValue(xsAssignRole);
    			}
    			// enable total 10 rows
    			for (int rownr = xsAssignRoles.size(); rownr < NR_ROLE_ROWS; rownr++)
    			{
    				UserSyncConfiguration.Groups.Group.AssignRoles.Role assignRole = new UserSyncConfiguration.Groups.Group.AssignRoles.Role();
    				assignRoles.addRoleObject(assignRole);   				
    			}
    		}
    		for (int extgroupnr = 0; extgroupnr < NR_EXT_GROUPS; extgroupnr++)
    		{
    			UserSyncConfiguration.Groups.Group group = new UserSyncConfiguration.Groups.Group();
    			groups.addGroupObject(group);
    			UserSyncConfiguration.Groups.Group.AssignRoles assignRoles = new UserSyncConfiguration.Groups.Group.AssignRoles();
    			group.setAssignRolesObject(assignRoles);
    			// enable total 10 rows
    			for (int rownr = 0; rownr < NR_ROLE_ROWS; rownr++)
    			{
    				UserSyncConfiguration.Groups.Group.AssignRoles.Role assignRole = new UserSyncConfiguration.Groups.Group.AssignRoles.Role();
    				assignRoles.addRoleObject(assignRole);   				
    			}
    		}    		
    		UserSyncConfiguration.MaintainUsers maintainUsers = new UserSyncConfiguration.MaintainUsers();
    		appConfig.setMaintainUsersObject(maintainUsers);
    		maintainUsers.setOnlyInsert(xsConfig.getOnlyInsert(true));
    		UserSyncConfiguration.MaintainUsers.NewUserConfig newUserConfig = new UserSyncConfiguration.MaintainUsers.NewUserConfig();
    		maintainUsers.setNewUserConfigObject(newUserConfig);
    		newUserConfig.setAuthenticationType(xsConfig.getAuthenticationType("domain"));
    		newUserConfig.setDefaultPassword(xsConfig.getDefaultPassword(""));
    		appConfig.setDeleteObsoleteUsers(xsConfig.getDeleteObsoleteUsers(false));
    	}
    	catch (Exception e)
    	{
    		throw new UserAdminException("Not able to load the UserSync Configuration", e);
    	}
    	finally
    	{
    		if (xsConfig != null)
    		{
    			xsConfig.clearConfig();
    		}
    	}
        return appConfig;
    }

    public void onInsert()
    {
    	// N.A.
    }

    /**
     * Update this UserSyncConfiguration
     */
    public void onUpdate()
    {
    	// get empty structure
    	UserSyncConfig xsConfig = null;
    	try
    	{
    		xsConfig = UserSyncConfig.getEmptyConfig();
    		// map UserSyncConfiguration to UserSyncConfig
    		xsConfig.setIncludeSubgroups(this.getIncludeSubgroups());
    		BusObjectIterator<UserSyncConfiguration.Groups.Group> groups = this.getGroupsObject().getGroupObjects();
    		while (groups.hasMoreElements())
    		{
    			UserSyncConfiguration.Groups.Group group = (UserSyncConfiguration.Groups.Group)groups.nextElement();
    			String groupDN = group.getDN();
    			String userSearchRoot = group.getUserSearchRoot();
    			if (Util.isSet(groupDN) && Util.isSet(userSearchRoot))
    			{
	    			xsConfig.addGroup(groupDN);
	    			xsConfig.setUserSearchRoot(groupDN, userSearchRoot);
	    			ArrayList<String> roleStrings = new ArrayList<String>();
	    			if (group.getAssignRolesObject() != null)
	    			{
		    			BusObjectIterator<UserSyncConfiguration.Groups.Group.AssignRoles.Role> roles = group.getAssignRolesObject().getRoleObjects();
		    			while (roles.hasMoreElements())
		    			{
		    				UserSyncConfiguration.Groups.Group.AssignRoles.Role role = (UserSyncConfiguration.Groups.Group.AssignRoles.Role)roles.nextElement();
		    				// skip empty rows
		    				if (Util.isSet(role.getValue()))
		    				{
		    					roleStrings.add(role.getValue());
		    				}
		    				else
		    				{
		    					group.getAssignRolesObject().removeRoleObject(role);
		    				}
		    			}
	    			}
	    			else
	    			{
	    				UserSyncConfiguration.Groups.Group.AssignRoles assignRoles = new UserSyncConfiguration.Groups.Group.AssignRoles();
	    				group.setAssignRolesObject(assignRoles);
	    			}
	    			// enable total 10 rows
	    			for (int rownr = roleStrings.size(); rownr < NR_ROLE_ROWS; rownr++)
	    			{
	    				UserSyncConfiguration.Groups.Group.AssignRoles.Role assignRole = new UserSyncConfiguration.Groups.Group.AssignRoles.Role();
	    				group.getAssignRolesObject().addRoleObject(assignRole);   				
	    			}    			
	    			xsConfig.setAssignRoles(groupDN, roleStrings);
    			}
    			else
    			{
    				this.getGroupsObject().removeGroupObject(group);
    			}
    		}
    		for (int extgroupnr = 0; extgroupnr < NR_EXT_GROUPS; extgroupnr++)
    		{
    			UserSyncConfiguration.Groups.Group group = new UserSyncConfiguration.Groups.Group();
    			this.getGroupsObject().addGroupObject(group);
    			UserSyncConfiguration.Groups.Group.AssignRoles assignRoles = new UserSyncConfiguration.Groups.Group.AssignRoles();
    			group.setAssignRolesObject(assignRoles);
    			// enable total 10 rows
    			for (int rownr = 0; rownr < NR_ROLE_ROWS; rownr++)
    			{
    				UserSyncConfiguration.Groups.Group.AssignRoles.Role assignRole = new UserSyncConfiguration.Groups.Group.AssignRoles.Role();
    				assignRoles.addRoleObject(assignRole);   				
    			}
    		}    		
    		xsConfig.setOnlyInsert(this.getMaintainUsersObject().getOnlyInsert());
    		xsConfig.setAuthenticationType(this.getMaintainUsersObject().getNewUserConfigObject().getAuthenticationType());
    		String pw = this.getMaintainUsersObject().getNewUserConfigObject().getDefaultPassword();
    		if (PasswordHashAndDigest.getPasswordHashingAlgorithm(pw) == PasswordHashAndDigest.PW_HA_NO_HASH)
    		{
    			pw = PasswordHashAndDigest.getSha1PasswordHash(pw);
    		}
    		xsConfig.setDefaultPassword(pw);
    		this.getMaintainUsersObject().getNewUserConfigObject().setDefaultPassword(pw);
    		xsConfig.setDeleteObsoleteUsers(this.getDeleteObsoleteUsers());
    		// update in XMLStore 
    		xsConfig.update();
    	}
		catch (Exception e)
		{
			throw new UserAdminException("Not able to update the UserSync Configuration", e);
		}    	
		finally
		{
			if (xsConfig != null)
			{
				xsConfig.clearConfig();
			}
		}    	
    }

    public void onDelete()
    {
    	// N.A.
    }

    public static class Groups extends UserSyncConfiguration.GroupsBase
    {
        public Groups()
        {
            this((BusObjectConfig)null);
        }

        public Groups(BusObjectConfig config)
        {
            super(config);
        }

        public void onInsert()
        {
        }

        public void onUpdate()
        {
        }

        public void onDelete()
        {
        }

        public static class Group extends UserSyncConfiguration.Groups.GroupBase
        {
            public Group()
            {
                this((BusObjectConfig)null);
            }

            public Group(BusObjectConfig config)
            {
                super(config);
            }

            public void onInsert()
            {
            }

            public void onUpdate()
            {
            }

            public void onDelete()
            {
            }

            public static class AssignRoles extends UserSyncConfiguration.Groups.Group.AssignRolesBase
            {
                public AssignRoles()
                {
                    this((BusObjectConfig)null);
                }

                public AssignRoles(BusObjectConfig config)
                {
                    super(config);
                }

                public void onInsert()
                {
                }

                public void onUpdate()
                {
                }

                public void onDelete()
                {
                }

                public static class Role extends UserSyncConfiguration.Groups.Group.AssignRoles.RoleBase
                {
                    public Role()
                    {
                        this((BusObjectConfig)null);
                    }

                    public Role(BusObjectConfig config)
                    {
                        super(config);
                    }

                    public void onInsert()
                    {
                    }

                    public void onUpdate()
                    {
                    }

                    public void onDelete()
                    {
                    }

                }
            }
        }
    }
    public static class MaintainUsers extends UserSyncConfiguration.MaintainUsersBase
    {
        public MaintainUsers()
        {
            this((BusObjectConfig)null);
        }

        public MaintainUsers(BusObjectConfig config)
        {
            super(config);
        }

        public void onInsert()
        {
        }

        public void onUpdate()
        {
        }

        public void onDelete()
        {
        }

        public static class NewUserConfig extends UserSyncConfiguration.MaintainUsers.NewUserConfigBase
        {
            public NewUserConfig()
            {
                this((BusObjectConfig)null);
            }

            public NewUserConfig(BusObjectConfig config)
            {
                super(config);
            }

            public void onInsert()
            {
            }

            public void onUpdate()
            {
            }

            public void onDelete()
            {
            }

        }
    }
}
