/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import java.util.ArrayList;
import java.util.HashSet;

import com.cordys.coe.tools.useradmin.cordys.Role;
import com.cordys.coe.tools.useradmin.cordys.Task;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;


/**
 * Class to support the UI on multiple user management.
 * 
 * @author kekema
 *
 */
public class UIMultipleUser extends UIMultipleUserBase
{
	// action
	public static final int AC_ASSIGN_ROLES = 10;
	public static final int AC_UNASSIGN_ROLES = 15;
	public static final int AC_ASSIGN_TASKS = 20;
	public static final int AC_UNASSIGN_TASKS = 25;
	public static final int AC_ASSIGN_TEAMS = 30;
	public static final int AC_UNASSIGN_TEAMS = 35;
	
    public UIMultipleUser()
    {
        this((BusObjectConfig)null);
    }

    public UIMultipleUser(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Generic method to update either the user roles, tasks or team assignments.
     * 
     * @param orgUserDN
     * @param action
     * @param updateData		has the generic list of UIListItems
     */
    public static void GenericUserUpdate(String orgUserDN, int action, UIUserUpdateData updateData)
    {
        switch (action)
        {
	        case AC_ASSIGN_ROLES:
	        case AC_UNASSIGN_ROLES:
	        {
	        	maintainRoles(orgUserDN, action, updateData);
	        	break;
	        }
	        case AC_ASSIGN_TASKS:
	        case AC_UNASSIGN_TASKS:
	        {
	        	maintainTasks(orgUserDN, action, updateData);
	        	break;
	        }
	        case AC_ASSIGN_TEAMS:
	        case AC_UNASSIGN_TEAMS:
	        {
	        	maintainTeams(orgUserDN, action, updateData, false);
	        	break;
	        }	        
        }
    }
    
    /**
     * Either add roles or remove role assignments as per the list in updateData
     * 
     * @param orgUserDN
     * @param action
     * @param updateData
     */
    public static void maintainRoles(String orgUserDN, int action, UIUserUpdateData updateData)
    {
    	ArrayList<String> roleDNs = new ArrayList<String>();
    	UIAssignments assignments = updateData.getAssignmentsObject();
    	if (assignments != null)
    	{
    		BusObjectIterator<UIListItem> listItems = assignments.getUIListItemObjects();
    		while (listItems.hasMoreElements())
    		{
    			UIListItem listItem = (UIListItem)listItems.nextElement();
    			roleDNs.add(listItem.getDN());
    		}
    		if (action == AC_ASSIGN_ROLES)
    		{
    			Role.maintainUserRoles(orgUserDN, roleDNs, null);
    		}
    		else
    		{
    			Role.maintainUserRoles(orgUserDN, null, roleDNs);
    		}
    	}
    }  
    
    /**
     * Either add tasks or remove task assignments as per the list in updateData
     * 
     * @param orgUserDN
     * @param action
     * @param updateData
     */    
    public static void maintainTasks(String orgUserDN, int action, UIUserUpdateData updateData)
    {
    	ArrayList<String> taskIDs = new ArrayList<String>();
    	UIAssignments assignments = updateData.getAssignmentsObject();
    	if (assignments != null)
    	{
    		BusObjectIterator<UIListItem> listItems = assignments.getUIListItemObjects();
    		while (listItems.hasMoreElements())
    		{
    			UIListItem listItem = (UIListItem)listItems.nextElement();
    			taskIDs.add(listItem.getID());
    		}
    		if (action == AC_ASSIGN_TASKS)
    		{
    			Task.maintainTasks(orgUserDN, taskIDs, null);
    		}
    		else
    		{
    			Task.maintainTasks(orgUserDN, null, taskIDs);
    		}
    	}    	
    }
    
    /**
     * Either add teams or remove team assignments as per the list in updateData
     * 
     * @param orgUserDN
     * @param action
     * @param updateData
     * @param havePrincipleUnitAlwaysSet 		if true, also set the principle unit when there is only 1 unit assignment
     */    
    public static void maintainTeams(String orgUserDN, int action, UIUserUpdateData updateData, boolean havePrincipleUnitAlwaysSet)
    {
    	HashSet<String> maintainTeamRoles = new HashSet<String>();
    	ArrayList<String> maintainRoles = new ArrayList<String>();
    	UIAssignments assignments = updateData.getAssignmentsObject();
    	if (assignments != null)
    	{
    		boolean firstOne = true;
    		String potentialPrincipleUnitID = "";
    		String secondPotentialPrincipleUnitID = "";
    		BusObjectIterator<UIListItem> listItems = assignments.getUIListItemObjects();
    		while (listItems.hasMoreElements())
    		{
    			UIListItem listItem = (UIListItem)listItems.nextElement();
    			maintainTeamRoles.add(listItem.getDN()+listItem.getID());
    			if (!maintainRoles.contains(listItem.getDN()))
    			{
    				maintainRoles.add(listItem.getDN());
    			}
    			if (firstOne)
    			{
	    			if (action == AC_ASSIGN_TEAMS)
	    			{
	    				// first team to add as assignment is potential principle unit
	    				// in case of action delete, a potential principle unit will be the
	    				// first assignment in the resulting list (secondPotentialPrincipleUnitID)
	    				potentialPrincipleUnitID = listItem.getID();
	    			}
	    			firstOne = false;
    			}
    		}
			if (action == AC_ASSIGN_TEAMS)
			{
				// make sure, user has all required roles
				Role.maintainUserRoles(orgUserDN, maintainRoles, null);
			}
			// maintain teams
    		HashSet<String> assignedTeams = new HashSet<String>();
    		// reuse UIUserTeams to construct and send tuple old/new 
    		UIUserTeams uiUserTeams = UIUserTeams.getUIUserTeams(orgUserDN);
    		if (uiUserTeams != null)
    		{
    			UIUserTeams updUserTeams = new UIUserTeams(new BusObjectConfig(uiUserTeams, BusObjectConfig.LOADED_OBJECT));
    			firstOne = true;
    			UIUserTeams.TeamRoles teamRolesObject = updUserTeams.getTeamRolesObject();
    			if (teamRolesObject != null)
    			{
	    			BusObjectIterator<UIUserTeams.TeamRoles.TeamRole> teamRoles = teamRolesObject.getTeamRoleObjects();
	    			while (teamRoles.hasMoreElements())
	    			{
	    				UIUserTeams.TeamRoles.TeamRole teamRole = (UIUserTeams.TeamRoles.TeamRole)teamRoles.nextElement();
	    				String roleID = teamRole.getRoleDN()+teamRole.getUnitID();
	    				if (maintainTeamRoles.contains(roleID))
	    				{
	    					if (action == AC_ASSIGN_TEAMS)
	    					{
	    						teamRole.setAssigned(true);
	    					}
	    					else if (action == AC_UNASSIGN_TEAMS)
	    					{
	    						teamRole.setAssigned(false);
	    					}
	    				}
	    				if (teamRole.getAssigned())
	    				{
	    					assignedTeams.add(teamRole.getUnitID());
	    					if (firstOne)
	    					{
	    						// first one in resulting list: potential principle unit
	    						secondPotentialPrincipleUnitID = teamRole.getUnitID();
	    						firstOne = false;
	    					}
	    				}
	    			}
	    			// check if currently set principle unit is stil valid
	    			// if not, take from earlier set potential principle unit
	    			String principleUnitID = updUserTeams.getPrincipleUnitID();
	    			if (Util.isSet(principleUnitID))
	    			{
	    				if (!assignedTeams.contains(principleUnitID))
	    				{
	    					principleUnitID = "";
	    				}
	    			}
	    			if ((assignedTeams.size() > 1) || havePrincipleUnitAlwaysSet)
	    			{
	    				if (!Util.isSet(principleUnitID))
	    				{
	    					if (Util.isSet(secondPotentialPrincipleUnitID))
	    					{
	    						principleUnitID = secondPotentialPrincipleUnitID;
	    					}
	    					else
	    					{
	    						principleUnitID = potentialPrincipleUnitID;
	    					}
	    				}
	    			}
	    			updUserTeams.setPrincipleUnitID(principleUnitID);
	    			updUserTeams.setReadBackOnUpdate(false);
	    			updUserTeams.update();
    			}
    		}
    	}    	
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	// N.A.
    }

    public void onDelete()
    {
    	// N.A.
    }

}
