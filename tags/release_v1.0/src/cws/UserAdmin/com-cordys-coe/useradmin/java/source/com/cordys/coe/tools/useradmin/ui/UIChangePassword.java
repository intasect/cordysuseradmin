/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin.ui;

import com.cordys.coe.tools.useradmin.cordys.CordysUser;
import com.cordys.coe.tools.useradmin.exception.UserAdminException;
import com.cordys.coe.tools.useradmin.util.PasswordHashAndDigest;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.event.AccessMode;
import com.cordys.cpc.bsf.event.ObjectAccessEvent;
import com.cordys.cpc.bsf.event.ObjectConstraintEvent;
import com.cordys.cpc.bsf.event.StdTriggers;


/**
 * UI class to support change of user password (current user)
 * 
 * @author kekema
 *
 */
public class UIChangePassword extends UIChangePasswordBase
{
    public UIChangePassword()
    {
        this((BusObjectConfig)null);
    }

    public UIChangePassword(BusObjectConfig config)
    {
        super(config);
    }

    /**
     * Init a UI object by populating the used (if any) hashing algorithm for the current user password.
     * 
     * @return
     */
    public static UIChangePassword initUIChangePassword()
    {
    	UIChangePassword cp = new UIChangePassword();
    	cp.makeTransient();
        CordysUser cordysUser = CordysUser.getCordysUser(BSF.getUser());
        if (cordysUser.getAuthenticationType().equals(CordysUser.AT_CUSTOM))
        {
        	String oldPw = cordysUser.getUserPassword();
        	cp.setOldPassword(oldPw);
	        cp.setOldPasswordHA(PasswordHashAndDigest.getPasswordHashingAlgorithm(oldPw));
	        cp.setPasswordChanged(false);
        }
        else
        {
        	throw new UserAdminException("Change password not applicable - no Cordys Authentication used.");
        }
        return cp;
    }
    
    /**
     * Set access levels
     */
    public void onDisplay(ObjectAccessEvent event)
    {
    	if (this.getPasswordChanged())
    	{
    		event.setAccess(null, AccessMode.READONLY);
    	}
    }
    
    @Override protected void onConstraint(ObjectConstraintEvent event)
    {
    	if (event.triggeredBy(StdTriggers.UPDATE_OBJECT))
    	{
			String newpw = this.getNewPassword();
			String cpw = this.getConfirmPassword();
			if (!Util.isSet(newpw))
			{
				event.addError(this, ATTR_NewPassword, "Pls enter your new password.");
			}			
			if (!Util.isSet(cpw))
			{
				event.addError(this, ATTR_ConfirmPassword, "Pls confirm your new password.");
			}  
			if (Util.isSet(newpw) && (Util.isSet(cpw)))
			{
				if (!newpw.equals(cpw))
				{
					event.addError(this, ATTR_ConfirmPassword, "Passwords do not match.");
				}
			}
    	}
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	if (!this.getPasswordChanged())
    	{
    		CordysUser.changePassword(BSF.getUser(), this.getNewPassword());
    		this.setPasswordChanged(true);
    	}
    }

    public void onDelete()
    {
    	// N.A.    	
    }

}
