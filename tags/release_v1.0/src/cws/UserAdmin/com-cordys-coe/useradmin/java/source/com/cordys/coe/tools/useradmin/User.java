/*
  This class has been generated by the Code Generator
*/

package com.cordys.coe.tools.useradmin;

import java.util.ArrayList;
import com.cordys.coe.tools.useradmin.cordys.CordysUser;
import com.cordys.coe.tools.useradmin.cordys.Organization;
import com.cordys.coe.tools.useradmin.exception.UserAdminException;
import com.cordys.coe.tools.useradmin.util.Base64Coder;
import com.cordys.coe.tools.useradmin.util.PasswordHashAndDigest;
import com.cordys.coe.tools.useradmin.util.UserSyncConfig;
import com.cordys.coe.tools.useradmin.util.Util;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;

/**
 * Class representing a Cordys User, supporting: 
 * - user synchronization between an external directory and Cordys
 * - import users from any source
 * 
 * @author kekema
 *
 */
public class User extends UserBase
{	
    public User()
    {
        this((BusObjectConfig)null);
    }

    public User(BusObjectConfig config)
    {
        super(config);
    }
    
    /**
     * Construct new user from platform cordys user
     * 
     * @param cordysUser
     */
    public User(CordysUser cordysUser)
    {
    	 this((BusObjectConfig)null);
    	 if (cordysUser != null)
    	 {
	    	 this.setOrgUserDN(cordysUser.getOrgUserDN());
	    	 this.setAuthUserDN(cordysUser.getAuthUserDN());
	    	 this.setUserName(cordysUser.getCN());
	    	 this.setFullUserName(cordysUser.getDescription());
	    	 this.setOSIdentity(cordysUser.getOSIdentity());
	    	 this.setAuthenticationType(cordysUser.getAuthenticationType());
	    	 this.setAddress(cordysUser.getRegisteredAddress());
	    	 this.setCompany(cordysUser.getCompany());
	    	 this.setTelephone(cordysUser.getTelephoneNumber());
	    	 this.setFax(cordysUser.getFacsimileTelephoneNumber());
	    	 this.setEmail(cordysUser.getEmail());
    	 }
    	 
    }

    /**
     * Insert/edit the external directory user in Cordys - this method can be used to import users from an external directory.
     * It depends on the UserSync configuration in XMLStore.
     * 
     * @param onlyInsert		insert only; no edit
     * @param extUserCN
     * @param extUserDN
     * @param extGroupDN
     * @param fullName
     * @param address
     * @param company
     * @param telephone
     * @param email
     * 
     * @return					user data, including the org user DN and auth user DN
     */
    public static com.cordys.coe.tools.useradmin.User importExtDirUser(boolean defaultOnlyInsert, String extUserCN, String extUserDN, String extGroupDN, String fullName, String address, String company, String telephone, String email)
    {
    	// load the UserSync config
        UserSyncConfig userSyncConfig = UserSyncConfig.loadConfig();
        // prepare a cordys user
        CordysUser cordysUser = new CordysUser();
        cordysUser.setCN(extUserCN);
        cordysUser.setOSIdentity(extUserCN);
        if (Util.isSet(fullName))
        {
        	cordysUser.setDescription(fullName);
        }
        else
        {
        	cordysUser.setDescription(extUserCN);
        }
        cordysUser.setRegisteredAddress(address);
        cordysUser.setCompany(company);
        cordysUser.setTelephoneNumber(telephone);
        cordysUser.setEmail(email);
        String authenticationType = userSyncConfig.getAuthenticationType(CordysUser.AT_CUSTOM);
        cordysUser.setAuthenticationType(authenticationType);
        if (authenticationType.equals(CordysUser.AT_CUSTOM))
        {
        	cordysUser.setUserPassword(userSyncConfig.getDefaultPassword(extUserCN));
        }
        // assign the user the roles as per the UserSync configuration (existing roles will be left untouched)
        cordysUser.setRoleDNs(userSyncConfig.getRoleDNs(extGroupDN));
        // use busextension ldap attribute to point out this user as originating from ext directory
        String userExt = "<busextension><ExtUser><SynchronizedFromExtDirectory>true</SynchronizedFromExtDirectory><ExtDirectory><UserCN>"+
                         extUserCN+"</UserCN><UserDN>"+extUserDN+"</UserDN><GroupDN>"+extGroupDN+"</GroupDN></ExtDirectory></ExtUser></busextension>";
        cordysUser.setBusextension(userExt);
        cordysUser.maintainUser(userSyncConfig.getOnlyInsert(defaultOnlyInsert));
        userSyncConfig.clearConfig();
        userSyncConfig = null;
        return new User(cordysUser);
    }
    
    /**
     * Import (insert new / overwrite existing) a user in Cordys (independent of where the user data comes from)
     * including any roles/tasks/team assignments. Roles/tasks/team assignments will be added if not yet
     * present; existing roles/tasks/team assignments are left untouched (so no deletes), as those might
     * be manually added.
     * 
     * @param onlyInsert		if true, do not do updates of existing users
     * @param userData			user data with user attributes, roles, tasks and team assignments.
     * 
     * @return					user data, including the org user DN and auth user DN
     */
    public static com.cordys.coe.tools.useradmin.User importUser(boolean onlyInsert, UserUpdateData userData)
    {
    	CordysUser cordysUser = null;
    	if ((userData != null) && (Util.isSet(userData.getUserName())))
    	{
	        // prepare a cordys user
	        cordysUser = new CordysUser();
	        cordysUser.setCN(userData.getUserName());
	        cordysUser.setOSIdentity(userData.getUserName());
	        if (Util.isSet(userData.getFullName()))
	        {
	        	cordysUser.setDescription(userData.getFullName());
	        }
	        else
	        {
	        	cordysUser.setDescription(userData.getUserName());
	        }
	        cordysUser.setRegisteredAddress(userData.getAddress());
	        cordysUser.setCompany(userData.getCompany());
	        cordysUser.setTelephoneNumber(userData.getTelephone());
	        cordysUser.setFacsimileTelephoneNumber(userData.getFax());
	        cordysUser.setEmail(userData.getEmail());
	        String authenticationType = userData.getAuthenticationType();
	        if (!Util.isSet(authenticationType))
	        {
	        	authenticationType = CordysUser.AT_CUSTOM;
	        }
	        cordysUser.setAuthenticationType(authenticationType);
	        if (authenticationType.equals(CordysUser.AT_CUSTOM))
	        {
	        	String pw = userData.getPassword();
	        	if (!Util.isSet(pw))
	        	{
	        		pw = userData.getUserName();
	        	}
	        	cordysUser.setUserPassword(pw);
	        }
	        if (userData.getRolesObject() != null)
	        {
		        // assign the user the roles as per UserUpdateData/Roles/Role
	        	ArrayList<String> roleDNs = userData.getRolesObject().getRoleDNs();
	        	cordysUser.setRoleDNs(roleDNs);
	        }
	        cordysUser.maintainUser(onlyInsert); 
	        if (userData.getTasksObject() != null)
	        {
	        	userData.getTasksObject().assignToUser(cordysUser.getOrgUserDN());
	        }
	        if (userData.getTeamsObject() != null)
	        {
	        	userData.getTeamsObject().assignToUser(cordysUser.getOrgUserDN());
	        }
    	}
    	else
    	{
    		throw new UserAdminException("Could not maintain the user in Cordys - UserName not given.");
    	}
        return new User(cordysUser);
    }
    
    /**
     * Delete the Cordys user in case originating from ext directory.
     * 
     * @param authUserDN
     * @param orgUserDN
     */
    public static void deleteObsoleteUser(String authUserDN, String orgUserDN)
    {
    	if (CordysUser.originatesFromExtDirectory(authUserDN))
    	{
    		CordysUser.deleteUser(orgUserDN);
    	}
    }
    
    /**
     * To test the UserAdmin functionality by test webservice operation
     * 
     * @param inp1
     * @param inp2
     * @param inp3
     * @return
     */
    public static String testIt(String inp1, String inp2, String inp3)
    {
    	return "";
    }

    public void onInsert()
    {
    	// N.A.
    }

    public void onUpdate()
    {
    	// N.A.
    }

    public void onDelete()
    {
    	// N.A.
    }

}
